# ifndef _replicate_1_txx
# define _replicate_1_txx
//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x1 (T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O == I) { 
		return;
	}

	register T o;
	register U i = n;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				O ++;
			}
		}
		else {
			for (; i; i--) {
				*(O +  Os * 0) = 0.; 
				O += Os * 1;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					O ++;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					I ++;
					O ++;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					O ++;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					O += 1 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					I ++;
					O += 1 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					O += 1 * Os;
				}
				break;
			}
		}
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x2 (T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

  if (O == I) { 
		return;
	}

	register T o;
	register U i = n >> 1;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				*(O +  1) = 0.; 
				O += 2;
			}
		}
		else {
			for (; i; i--) {
				*(O +  Os * 0) = 0.; 
				*(O +  Os * 1) = 0.; 
				O += Os * 2;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					*(O +  1) = o; 
					O += 2;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					*(O +  1) = *(I +  1); 
					I += 2;
					O += 2;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					*(O +  1) = * I; I += Is;
					O += 2;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					*(O +  1 * Os) = o; 
					O += 2 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					*(O +  1 * Os) = *(I +  1);
					I += 2;
					O += 2 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					*(O +  1 * Os) = * I; I += Is;
					O += 2 * Os;
				}
				break;
			}
		}
	}
	i = n & 1;
	if (i) {
		replicate_1x1(O, i, I, Os, Is); 
	}
}
//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x4 (T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

  if (O == I) { 
		return;
	}

	register T o;
	register U i = n >> 2;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				*(O +  1) = 0.; 
				*(O +  2) = 0.; 
				*(O +  3) = 0.; 
				O += 4;
			}
		}
		else {
			for (; i; i--) {
				*(O + Os *  0) = 0.; 
				*(O + Os *  1) = 0.; 
				*(O + Os *  2) = 0.; 
				*(O + Os *  3) = 0.; 
				O += Os *  4;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					*(O +  1) = o; 
					*(O +  2) = o; 
					*(O +  3) = o; 
					O += 4;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					*(O +  1) = *(I +  1); 
					*(O +  2) = *(I +  2); 
					*(O +  3) = *(I +  3); 
					I += 4;
					O += 4;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					*(O +  1) = * I; I += Is;
					*(O +  2) = * I; I += Is;
					*(O +  3) = * I; I += Is;
					O += 4;
				}
				break;
			}
		}
	}
	else {
	  switch (Is) {
		  case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					*(O +  1 * Os) = o; 
					*(O +  2 * Os) = o; 
					*(O +  3 * Os) = o; 
					O += 4 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					*(O +  1 * Os) = *(I +  1);
					*(O +  2 * Os) = *(I +  2);
					*(O +  3 * Os) = *(I +  3);
					I += 4;
					O += 4 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					*(O +  1 * Os) = * I; I += Is;
					*(O +  2 * Os) = * I; I += Is;
					*(O +  3 * Os) = * I; I += Is;
					O += 4 * Os;
				}
				break;
			}
		}
	}
	i = n & 3;
	if (i) {
 		replicate_1x2(O, i, I, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x8 (T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

  if (O == I) { 
	  return;
	}

	register T o;
	register U i = n >> 3;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				*(O +  1) = 0.; 
				*(O +  2) = 0.; 
				*(O +  3) = 0.; 
				*(O +  4) = 0.; 
				*(O +  5) = 0.; 
				*(O +  6) = 0.; 
				*(O +  7) = 0.; 
				O += 8;
			}
		}
		else {
			for (; i; i--) {
				*(O + Os *  0) = 0.; 
				*(O + Os *  1) = 0.; 
				*(O + Os *  2) = 0.; 
				*(O + Os *  3) = 0.; 
				*(O + Os *  4) = 0.; 
				*(O + Os *  5) = 0.; 
				*(O + Os *  6) = 0.; 
				*(O + Os *  7) = 0.; 
				O += Os *  8;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					*(O +  1) = o; 
					*(O +  2) = o; 
					*(O +  3) = o; 
					*(O +  4) = o; 
					*(O +  5) = o; 
					*(O +  6) = o; 
					*(O +  7) = o; 
					O += 8;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					*(O +  1) = *(I +  1); 
					*(O +  2) = *(I +  2); 
					*(O +  3) = *(I +  3); 
					*(O +  4) = *(I +  4); 
					*(O +  5) = *(I +  5); 
					*(O +  6) = *(I +  6); 
					*(O +  7) = *(I +  7); 
					I += 8;
					O += 8;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					*(O +  1) = * I; I += Is;
					*(O +  2) = * I; I += Is;
					*(O +  3) = * I; I += Is;
					*(O +  4) = * I; I += Is;
					*(O +  5) = * I; I += Is;
					*(O +  6) = * I; I += Is;
					*(O +  7) = * I; I += Is;
					O += 8;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					*(O +  1 * Os) = o; 
					*(O +  2 * Os) = o; 
					*(O +  3 * Os) = o; 
					*(O +  4 * Os) = o; 
					*(O +  5 * Os) = o; 
					*(O +  6 * Os) = o; 
					*(O +  7 * Os) = o; 
					O += 8 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					*(O +  1 * Os) = *(I +  1);
					*(O +  2 * Os) = *(I +  2);
					*(O +  3 * Os) = *(I +  3);
					*(O +  4 * Os) = *(I +  4);
					*(O +  5 * Os) = *(I +  5);
					*(O +  6 * Os) = *(I +  6);
					*(O +  7 * Os) = *(I +  7);
					I += 8;
					O += 8 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					*(O +  1 * Os) = * I; I += Is;
					*(O +  2 * Os) = * I; I += Is;
					*(O +  3 * Os) = * I; I += Is;
					*(O +  4 * Os) = * I; I += Is;
					*(O +  5 * Os) = * I; I += Is;
					*(O +  6 * Os) = * I; I += Is;
					*(O +  7 * Os) = * I; I += Is;
					O += 8 * Os;
				}
				break;
			}
		}
	}
	i = n & 7;
	if (i) {
 		replicate_1x4(O, i, I, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x16(T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O == I) { 
		return;
	}

 	register T o;
	register U i = n >> 4;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				*(O +  1) = 0.; 
				*(O +  2) = 0.; 
				*(O +  3) = 0.; 
				*(O +  4) = 0.; 
				*(O +  5) = 0.; 
				*(O +  6) = 0.; 
				*(O +  7) = 0.; 
				*(O +  8) = 0.; 
				*(O +  9) = 0.; 
				*(O + 10) = 0.; 
				*(O + 11) = 0.; 
				*(O + 12) = 0.; 
				*(O + 13) = 0.; 
				*(O + 14) = 0.; 
				*(O + 15) = 0.; 
				O += 16;
			}
		}
		else {
			for (; i; i--) {
				*(O + Os *  0) = 0.; 
				*(O + Os *  1) = 0.; 
				*(O + Os *  2) = 0.; 
				*(O + Os *  3) = 0.; 
				*(O + Os *  4) = 0.; 
				*(O + Os *  5) = 0.; 
				*(O + Os *  6) = 0.; 
				*(O + Os *  7) = 0.; 
				*(O + Os *  8) = 0.; 
				*(O + Os *  9) = 0.; 
				*(O + Os * 10) = 0.; 
				*(O + Os * 11) = 0.; 
				*(O + Os * 12) = 0.; 
				*(O + Os * 13) = 0.; 
				*(O + Os * 14) = 0.; 
				*(O + Os * 15) = 0.; 
				O += Os * 16;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
		  case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					*(O +  1) = o; 
					*(O +  2) = o; 
					*(O +  3) = o; 
					*(O +  4) = o; 
					*(O +  5) = o; 
					*(O +  6) = o; 
					*(O +  7) = o; 
					*(O +  8) = o; 
					*(O +  9) = o; 
					*(O + 10) = o; 
					*(O + 11) = o; 
					*(O + 12) = o; 
					*(O + 13) = o; 
					*(O + 14) = o; 
					*(O + 15) = o; 
					O += 16;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					*(O +  1) = *(I +  1); 
					*(O +  2) = *(I +  2); 
					*(O +  3) = *(I +  3); 
					*(O +  4) = *(I +  4); 
					*(O +  5) = *(I +  5); 
					*(O +  6) = *(I +  6); 
					*(O +  7) = *(I +  7); 
					*(O +  8) = *(I +  8); 
					*(O +  9) = *(I +  9); 
					*(O + 10) = *(I + 10); 
					*(O + 11) = *(I + 11); 
					*(O + 12) = *(I + 12); 
					*(O + 13) = *(I + 13); 
					*(O + 14) = *(I + 14); 
					*(O + 15) = *(I + 15); 
					I += 16;
					O += 16;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					*(O +  1) = * I; I += Is;
					*(O +  2) = * I; I += Is;
					*(O +  3) = * I; I += Is;
					*(O +  4) = * I; I += Is;
					*(O +  5) = * I; I += Is;
					*(O +  6) = * I; I += Is;
					*(O +  7) = * I; I += Is;
					*(O +  8) = * I; I += Is;
					*(O +  9) = * I; I += Is;
					*(O + 10) = * I; I += Is;
					*(O + 11) = * I; I += Is;
					*(O + 12) = * I; I += Is;
					*(O + 13) = * I; I += Is;
					*(O + 14) = * I; I += Is;
					*(O + 15) = * I; I += Is;
					O += 16;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					*(O +  1 * Os) = o; 
					*(O +  2 * Os) = o; 
					*(O +  3 * Os) = o; 
					*(O +  4 * Os) = o; 
					*(O +  5 * Os) = o; 
					*(O +  6 * Os) = o; 
					*(O +  7 * Os) = o; 
					*(O +  8 * Os) = o; 
					*(O +  9 * Os) = o; 
					*(O + 10 * Os) = o; 
					*(O + 11 * Os) = o; 
					*(O + 12 * Os) = o; 
					*(O + 13 * Os) = o; 
					*(O + 14 * Os) = o; 
					*(O + 15 * Os) = o; 
					O += 16 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					*(O +  1 * Os) = *(I +  1);
					*(O +  2 * Os) = *(I +  2);
					*(O +  3 * Os) = *(I +  3);
					*(O +  4 * Os) = *(I +  4);
					*(O +  5 * Os) = *(I +  5);
					*(O +  6 * Os) = *(I +  6);
					*(O +  7 * Os) = *(I +  7);
					*(O +  8 * Os) = *(I +  8);
					*(O +  9 * Os) = *(I +  9);
					*(O + 10 * Os) = *(I +  0);
					*(O + 11 * Os) = *(I + 11);
					*(O + 12 * Os) = *(I + 12);
					*(O + 13 * Os) = *(I + 13);
					*(O + 14 * Os) = *(I + 14);
					*(O + 15 * Os) = *(I + 15);
					I += 16;
					O += 16 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					*(O +  1 * Os) = * I; I += Is;
					*(O +  2 * Os) = * I; I += Is;
					*(O +  3 * Os) = * I; I += Is;
					*(O +  4 * Os) = * I; I += Is;
					*(O +  5 * Os) = * I; I += Is;
					*(O +  6 * Os) = * I; I += Is;
					*(O +  7 * Os) = * I; I += Is;
					*(O +  8 * Os) = * I; I += Is;
					*(O +  9 * Os) = * I; I += Is;
					*(O + 10 * Os) = * I; I += Is;
					*(O + 11 * Os) = * I; I += Is;
					*(O + 12 * Os) = * I; I += Is;
					*(O + 13 * Os) = * I; I += Is;
					*(O + 14 * Os) = * I; I += Is;
					*(O + 15 * Os) = * I; I += Is;
					O += 16 * Os;
				}
				break;
			}
		}
	}
	i = n & 15;
	if (i) {
 		replicate_1x8(O, i, I, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x32(T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

  if (O == I) { 
	  return;
	}

	register T o;
	register U i = n >> 5;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				*(O +  1) = 0.; 
				*(O +  2) = 0.; 
				*(O +  3) = 0.; 
				*(O +  4) = 0.; 
				*(O +  5) = 0.; 
				*(O +  6) = 0.; 
				*(O +  7) = 0.; 
				*(O +  8) = 0.; 
				*(O +  9) = 0.; 
				*(O + 10) = 0.; 
				*(O + 11) = 0.; 
				*(O + 12) = 0.; 
				*(O + 13) = 0.; 
				*(O + 14) = 0.; 
				*(O + 15) = 0.; 
				*(O + 16) = 0.; 
				*(O + 17) = 0.; 
				*(O + 18) = 0.; 
				*(O + 19) = 0.; 
				*(O + 20) = 0.; 
				*(O + 21) = 0.; 
				*(O + 22) = 0.; 
				*(O + 23) = 0.; 
				*(O + 24) = 0.; 
				*(O + 25) = 0.; 
				*(O + 26) = 0.; 
				*(O + 27) = 0.; 
				*(O + 28) = 0.; 
				*(O + 29) = 0.; 
				*(O + 30) = 0.; 
				*(O + 31) = 0.; 
				O += 32;
			}
		}
		else {
			for (; i; i--) {
				*(O + Os *  0) = 0.; 
				*(O + Os *  1) = 0.; 
				*(O + Os *  2) = 0.; 
				*(O + Os *  3) = 0.; 
				*(O + Os *  4) = 0.; 
				*(O + Os *  5) = 0.; 
				*(O + Os *  6) = 0.; 
				*(O + Os *  7) = 0.; 
				*(O + Os *  8) = 0.; 
				*(O + Os *  9) = 0.; 
				*(O + Os * 10) = 0.; 
				*(O + Os * 11) = 0.; 
				*(O + Os * 12) = 0.; 
				*(O + Os * 13) = 0.; 
				*(O + Os * 14) = 0.; 
				*(O + Os * 15) = 0.; 
				*(O + Os * 16) = 0.; 
				*(O + Os * 17) = 0.; 
				*(O + Os * 18) = 0.; 
				*(O + Os * 19) = 0.; 
				*(O + Os * 20) = 0.; 
				*(O + Os * 21) = 0.; 
				*(O + Os * 22) = 0.; 
				*(O + Os * 23) = 0.; 
				*(O + Os * 24) = 0.; 
				*(O + Os * 25) = 0.; 
				*(O + Os * 26) = 0.; 
				*(O + Os * 27) = 0.; 
				*(O + Os * 28) = 0.; 
				*(O + Os * 29) = 0.; 
				*(O + Os * 30) = 0.; 
				*(O + Os * 31) = 0.; 
				O += Os * 32;
			}
		}
	}
	else if (Os == 1) {
	 	switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					*(O +  1) = o; 
					*(O +  2) = o; 
					*(O +  3) = o; 
					*(O +  4) = o; 
					*(O +  5) = o; 
					*(O +  6) = o; 
					*(O +  7) = o; 
					*(O +  8) = o; 
					*(O +  9) = o; 
					*(O + 10) = o; 
					*(O + 11) = o; 
					*(O + 12) = o; 
					*(O + 13) = o; 
					*(O + 14) = o; 
					*(O + 15) = o; 
					*(O + 16) = o; 
					*(O + 17) = o; 
					*(O + 18) = o; 
					*(O + 19) = o; 
					*(O + 20) = o; 
					*(O + 21) = o; 
					*(O + 22) = o; 
					*(O + 23) = o; 
					*(O + 24) = o; 
					*(O + 25) = o; 
					*(O + 26) = o; 
					*(O + 27) = o; 
					*(O + 28) = o; 
					*(O + 29) = o; 
					*(O + 30) = o; 
					*(O + 31) = o; 
					O += 32;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					*(O +  1) = *(I +  1); 
					*(O +  2) = *(I +  2); 
					*(O +  3) = *(I +  3); 
					*(O +  4) = *(I +  4); 
					*(O +  5) = *(I +  5); 
					*(O +  6) = *(I +  6); 
					*(O +  7) = *(I +  7); 
					*(O +  8) = *(I +  8); 
					*(O +  9) = *(I +  9); 
					*(O + 10) = *(I + 10); 
					*(O + 11) = *(I + 11); 
					*(O + 12) = *(I + 12); 
					*(O + 13) = *(I + 13); 
					*(O + 14) = *(I + 14); 
					*(O + 15) = *(I + 15); 
					*(O + 16) = *(I + 16); 
					*(O + 17) = *(I + 17); 
					*(O + 18) = *(I + 18); 
					*(O + 19) = *(I + 19); 
					*(O + 20) = *(I + 20); 
					*(O + 21) = *(I + 21); 
					*(O + 22) = *(I + 22); 
					*(O + 23) = *(I + 23); 
					*(O + 24) = *(I + 24); 
					*(O + 25) = *(I + 25); 
					*(O + 26) = *(I + 26); 
					*(O + 27) = *(I + 27); 
					*(O + 28) = *(I + 28); 
					*(O + 29) = *(I + 29); 
					*(O + 30) = *(I + 30); 
					*(O + 31) = *(I + 31); 
					I += 32;
					O += 32;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					*(O +  1) = * I; I += Is;
					*(O +  2) = * I; I += Is;
					*(O +  3) = * I; I += Is;
					*(O +  4) = * I; I += Is;
					*(O +  5) = * I; I += Is;
					*(O +  6) = * I; I += Is;
					*(O +  7) = * I; I += Is;
					*(O +  8) = * I; I += Is;
					*(O +  9) = * I; I += Is;
					*(O + 10) = * I; I += Is;
					*(O + 11) = * I; I += Is;
					*(O + 12) = * I; I += Is;
					*(O + 13) = * I; I += Is;
					*(O + 14) = * I; I += Is;
					*(O + 15) = * I; I += Is;
					*(O + 16) = * I; I += Is;
					*(O + 17) = * I; I += Is;
					*(O + 18) = * I; I += Is;
					*(O + 19) = * I; I += Is;
					*(O + 20) = * I; I += Is;
					*(O + 21) = * I; I += Is;
					*(O + 22) = * I; I += Is;
					*(O + 23) = * I; I += Is;
					*(O + 24) = * I; I += Is;
					*(O + 25) = * I; I += Is;
					*(O + 26) = * I; I += Is;
					*(O + 27) = * I; I += Is;
					*(O + 28) = * I; I += Is;
					*(O + 29) = * I; I += Is;
					*(O + 30) = * I; I += Is;
					*(O + 31) = * I; I += Is;
					O += 32;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					*(O +  1 * Os) = o; 
					*(O +  2 * Os) = o; 
					*(O +  3 * Os) = o; 
					*(O +  4 * Os) = o; 
					*(O +  5 * Os) = o; 
					*(O +  6 * Os) = o; 
					*(O +  7 * Os) = o; 
					*(O +  8 * Os) = o; 
					*(O +  9 * Os) = o; 
					*(O + 10 * Os) = o; 
					*(O + 11 * Os) = o; 
					*(O + 12 * Os) = o; 
					*(O + 13 * Os) = o; 
					*(O + 14 * Os) = o; 
					*(O + 15 * Os) = o; 
					*(O + 16 * Os) = o; 
					*(O + 17 * Os) = o; 
					*(O + 18 * Os) = o; 
					*(O + 19 * Os) = o; 
					*(O + 20 * Os) = o; 
					*(O + 21 * Os) = o; 
					*(O + 22 * Os) = o; 
					*(O + 23 * Os) = o; 
					*(O + 24 * Os) = o; 
					*(O + 25 * Os) = o; 
					*(O + 26 * Os) = o; 
					*(O + 27 * Os) = o; 
					*(O + 28 * Os) = o; 
					*(O + 29 * Os) = o; 
					*(O + 30 * Os) = o; 
					*(O + 31 * Os) = o; 
					O += 32 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					*(O +  1 * Os) = *(I +  1);
					*(O +  2 * Os) = *(I +  2);
					*(O +  3 * Os) = *(I +  3);
					*(O +  4 * Os) = *(I +  4);
					*(O +  5 * Os) = *(I +  5);
					*(O +  6 * Os) = *(I +  6);
					*(O +  7 * Os) = *(I +  7);
					*(O +  8 * Os) = *(I +  8);
					*(O +  9 * Os) = *(I +  9);
					*(O + 10 * Os) = *(I +  0);
					*(O + 11 * Os) = *(I + 11);
					*(O + 12 * Os) = *(I + 12);
					*(O + 13 * Os) = *(I + 13);
					*(O + 14 * Os) = *(I + 14);
					*(O + 15 * Os) = *(I + 15);
					*(O + 16 * Os) = *(I + 16);
					*(O + 17 * Os) = *(I + 17);
					*(O + 18 * Os) = *(I + 18);
					*(O + 19 * Os) = *(I + 19);
					*(O + 20 * Os) = *(I + 20);
					*(O + 21 * Os) = *(I + 21);
					*(O + 22 * Os) = *(I + 22);
					*(O + 23 * Os) = *(I + 23);
					*(O + 24 * Os) = *(I + 24);
					*(O + 25 * Os) = *(I + 25);
					*(O + 26 * Os) = *(I + 26);
					*(O + 27 * Os) = *(I + 27);
					*(O + 28 * Os) = *(I + 28);
					*(O + 29 * Os) = *(I + 29);
					*(O + 30 * Os) = *(I + 30);
					*(O + 31 * Os) = *(I + 31);
					I += 32;
					O += 32 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					*(O +  1 * Os) = * I; I += Is;
					*(O +  2 * Os) = * I; I += Is;
					*(O +  3 * Os) = * I; I += Is;
					*(O +  4 * Os) = * I; I += Is;
					*(O +  5 * Os) = * I; I += Is;
					*(O +  6 * Os) = * I; I += Is;
					*(O +  7 * Os) = * I; I += Is;
					*(O +  8 * Os) = * I; I += Is;
					*(O +  9 * Os) = * I; I += Is;
					*(O + 10 * Os) = * I; I += Is;
					*(O + 11 * Os) = * I; I += Is;
					*(O + 12 * Os) = * I; I += Is;
					*(O + 13 * Os) = * I; I += Is;
					*(O + 14 * Os) = * I; I += Is;
					*(O + 15 * Os) = * I; I += Is;
					*(O + 16 * Os) = * I; I += Is;
					*(O + 17 * Os) = * I; I += Is;
					*(O + 18 * Os) = * I; I += Is;
					*(O + 19 * Os) = * I; I += Is;
					*(O + 20 * Os) = * I; I += Is;
					*(O + 21 * Os) = * I; I += Is;
					*(O + 22 * Os) = * I; I += Is;
					*(O + 23 * Os) = * I; I += Is;
					*(O + 24 * Os) = * I; I += Is;
					*(O + 25 * Os) = * I; I += Is;
					*(O + 26 * Os) = * I; I += Is;
					*(O + 27 * Os) = * I; I += Is;
					*(O + 28 * Os) = * I; I += Is;
					*(O + 29 * Os) = * I; I += Is;
					*(O + 30 * Os) = * I; I += Is;
					*(O + 31 * Os) = * I; I += Is;
					O += 32 * Os;
				}
				break;
			}
		}
	}
	i = n & 31;
	if (i) {
		replicate_1x16(O, i, I, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_1x64(T* O,
																	volatile const U n,
																	T* I = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

  if (O == I) { 
	  return;
	}

	register T o;
	register U i = n >> 6;
  
	if (I == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O +  0) = 0.; 
				*(O +  1) = 0.; 
				*(O +  2) = 0.; 
				*(O +  3) = 0.; 
				*(O +  4) = 0.; 
				*(O +  5) = 0.; 
				*(O +  6) = 0.; 
				*(O +  7) = 0.; 
				*(O +  8) = 0.; 
				*(O +  9) = 0.; 
				*(O + 10) = 0.; 
				*(O + 11) = 0.; 
				*(O + 12) = 0.; 
				*(O + 13) = 0.; 
				*(O + 14) = 0.; 
				*(O + 15) = 0.; 
				*(O + 16) = 0.; 
				*(O + 17) = 0.; 
				*(O + 18) = 0.; 
				*(O + 19) = 0.; 
				*(O + 20) = 0.; 
				*(O + 21) = 0.; 
				*(O + 22) = 0.; 
				*(O + 23) = 0.; 
				*(O + 24) = 0.; 
				*(O + 25) = 0.; 
				*(O + 26) = 0.; 
				*(O + 27) = 0.; 
				*(O + 28) = 0.; 
				*(O + 29) = 0.; 
				*(O + 30) = 0.; 
				*(O + 31) = 0.; 
				*(O + 32) = 0.; 
				*(O + 33) = 0.; 
				*(O + 34) = 0.; 
				*(O + 35) = 0.; 
				*(O + 36) = 0.; 
				*(O + 37) = 0.; 
				*(O + 38) = 0.; 
				*(O + 39) = 0.; 
				*(O + 40) = 0.; 
				*(O + 41) = 0.; 
				*(O + 42) = 0.; 
				*(O + 43) = 0.; 
				*(O + 44) = 0.; 
				*(O + 45) = 0.; 
				*(O + 46) = 0.; 
				*(O + 47) = 0.; 
				*(O + 48) = 0.; 
				*(O + 49) = 0.; 
				*(O + 50) = 0.; 
				*(O + 51) = 0.; 
				*(O + 52) = 0.; 
				*(O + 53) = 0.; 
				*(O + 54) = 0.; 
				*(O + 55) = 0.; 
				*(O + 56) = 0.; 
				*(O + 57) = 0.; 
				*(O + 58) = 0.; 
				*(O + 59) = 0.; 
				*(O + 60) = 0.; 
				*(O + 61) = 0.; 
				*(O + 62) = 0.; 
				*(O + 63) = 0.; 
				O += 64;
			}
		}
		else {
			for (; i; i--) {
				*(O + Os *  0) = 0.; 
				*(O + Os *  1) = 0.; 
				*(O + Os *  2) = 0.; 
				*(O + Os *  3) = 0.; 
				*(O + Os *  4) = 0.; 
				*(O + Os *  5) = 0.; 
				*(O + Os *  6) = 0.; 
				*(O + Os *  7) = 0.; 
				*(O + Os *  8) = 0.; 
				*(O + Os *  9) = 0.; 
				*(O + Os * 10) = 0.; 
				*(O + Os * 11) = 0.; 
				*(O + Os * 12) = 0.; 
				*(O + Os * 13) = 0.; 
				*(O + Os * 14) = 0.; 
				*(O + Os * 15) = 0.; 
				*(O + Os * 16) = 0.; 
				*(O + Os * 17) = 0.; 
				*(O + Os * 18) = 0.; 
				*(O + Os * 19) = 0.; 
				*(O + Os * 20) = 0.; 
				*(O + Os * 21) = 0.; 
				*(O + Os * 22) = 0.; 
				*(O + Os * 23) = 0.; 
				*(O + Os * 24) = 0.; 
				*(O + Os * 25) = 0.; 
				*(O + Os * 26) = 0.; 
				*(O + Os * 27) = 0.; 
				*(O + Os * 28) = 0.; 
				*(O + Os * 29) = 0.; 
				*(O + Os * 30) = 0.; 
				*(O + Os * 31) = 0.; 
				*(O + Os * 32) = 0.; 
				*(O + Os * 33) = 0.; 
				*(O + Os * 34) = 0.; 
				*(O + Os * 35) = 0.; 
				*(O + Os * 36) = 0.; 
				*(O + Os * 37) = 0.; 
				*(O + Os * 38) = 0.; 
				*(O + Os * 39) = 0.; 
				*(O + Os * 40) = 0.; 
				*(O + Os * 41) = 0.; 
				*(O + Os * 42) = 0.; 
				*(O + Os * 43) = 0.; 
				*(O + Os * 44) = 0.; 
				*(O + Os * 45) = 0.; 
				*(O + Os * 46) = 0.; 
				*(O + Os * 47) = 0.; 
				*(O + Os * 48) = 0.; 
				*(O + Os * 49) = 0.; 
				*(O + Os * 50) = 0.; 
				*(O + Os * 51) = 0.; 
				*(O + Os * 52) = 0.; 
				*(O + Os * 53) = 0.; 
				*(O + Os * 54) = 0.; 
				*(O + Os * 55) = 0.; 
				*(O + Os * 56) = 0.; 
				*(O + Os * 57) = 0.; 
				*(O + Os * 58) = 0.; 
				*(O + Os * 59) = 0.; 
				*(O + Os * 60) = 0.; 
				*(O + Os * 61) = 0.; 
				*(O + Os * 62) = 0.; 
				*(O + Os * 63) = 0.; 
				O += Os * 64;
			}
		}
	}
	else if (Os == 1) {
	 	switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0) = o; 
					*(O +  1) = o; 
					*(O +  2) = o; 
					*(O +  3) = o; 
					*(O +  4) = o; 
					*(O +  5) = o; 
					*(O +  6) = o; 
					*(O +  7) = o; 
					*(O +  8) = o; 
					*(O +  9) = o; 
					*(O + 10) = o; 
					*(O + 11) = o; 
					*(O + 12) = o; 
					*(O + 13) = o; 
					*(O + 14) = o; 
					*(O + 15) = o; 
					*(O + 16) = o; 
					*(O + 17) = o; 
					*(O + 18) = o; 
					*(O + 19) = o; 
					*(O + 20) = o; 
					*(O + 21) = o; 
					*(O + 22) = o; 
					*(O + 23) = o; 
					*(O + 24) = o; 
					*(O + 25) = o; 
					*(O + 26) = o; 
					*(O + 27) = o; 
					*(O + 28) = o; 
					*(O + 29) = o; 
					*(O + 30) = o; 
					*(O + 31) = o; 
					*(O + 32) = o; 
					*(O + 33) = o; 
					*(O + 34) = o; 
					*(O + 35) = o; 
					*(O + 36) = o; 
					*(O + 37) = o; 
					*(O + 38) = o; 
					*(O + 39) = o; 
					*(O + 40) = o; 
					*(O + 41) = o; 
					*(O + 42) = o; 
					*(O + 43) = o; 
					*(O + 44) = o; 
					*(O + 45) = o; 
					*(O + 46) = o; 
					*(O + 47) = o; 
					*(O + 48) = o; 
					*(O + 49) = o; 
					*(O + 50) = o; 
					*(O + 51) = o; 
					*(O + 52) = o; 
					*(O + 53) = o; 
					*(O + 54) = o; 
					*(O + 55) = o; 
					*(O + 56) = o; 
					*(O + 57) = o; 
					*(O + 58) = o; 
					*(O + 59) = o; 
					*(O + 60) = o; 
					*(O + 61) = o; 
					*(O + 62) = o; 
					*(O + 63) = o; 
					O += 64;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0) = *(I +  0); 
					*(O +  1) = *(I +  1); 
					*(O +  2) = *(I +  2); 
					*(O +  3) = *(I +  3); 
					*(O +  4) = *(I +  4); 
					*(O +  5) = *(I +  5); 
					*(O +  6) = *(I +  6); 
					*(O +  7) = *(I +  7); 
					*(O +  8) = *(I +  8); 
					*(O +  9) = *(I +  9); 
					*(O + 10) = *(I + 10); 
					*(O + 11) = *(I + 11); 
					*(O + 12) = *(I + 12); 
					*(O + 13) = *(I + 13); 
					*(O + 14) = *(I + 14); 
					*(O + 15) = *(I + 15); 
					*(O + 16) = *(I + 16); 
					*(O + 17) = *(I + 17); 
					*(O + 18) = *(I + 18); 
					*(O + 19) = *(I + 19); 
					*(O + 20) = *(I + 20); 
					*(O + 21) = *(I + 21); 
					*(O + 22) = *(I + 22); 
					*(O + 23) = *(I + 23); 
					*(O + 24) = *(I + 24); 
					*(O + 25) = *(I + 25); 
					*(O + 26) = *(I + 26); 
					*(O + 27) = *(I + 27); 
					*(O + 28) = *(I + 28); 
					*(O + 29) = *(I + 29); 
					*(O + 30) = *(I + 30); 
					*(O + 31) = *(I + 31); 
					*(O + 32) = *(I + 32); 
					*(O + 33) = *(I + 33); 
					*(O + 34) = *(I + 34); 
					*(O + 35) = *(I + 35); 
					*(O + 36) = *(I + 36); 
					*(O + 37) = *(I + 37); 
					*(O + 38) = *(I + 38); 
					*(O + 39) = *(I + 39); 
					*(O + 40) = *(I + 40); 
					*(O + 41) = *(I + 41); 
					*(O + 42) = *(I + 42); 
					*(O + 43) = *(I + 43); 
					*(O + 44) = *(I + 44); 
					*(O + 45) = *(I + 45); 
					*(O + 46) = *(I + 46); 
					*(O + 47) = *(I + 47); 
					*(O + 48) = *(I + 48); 
					*(O + 49) = *(I + 49); 
					*(O + 50) = *(I + 50); 
					*(O + 51) = *(I + 51); 
					*(O + 52) = *(I + 52); 
					*(O + 53) = *(I + 53); 
					*(O + 54) = *(I + 54); 
					*(O + 55) = *(I + 55); 
					*(O + 56) = *(I + 56); 
					*(O + 57) = *(I + 57); 
					*(O + 58) = *(I + 58); 
					*(O + 59) = *(I + 59); 
					*(O + 60) = *(I + 60); 
					*(O + 61) = *(I + 61); 
					*(O + 62) = *(I + 62); 
					*(O + 63) = *(I + 63); 
					I += 64;
					O += 64;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0) = * I; I += Is;
					*(O +  1) = * I; I += Is;
					*(O +  2) = * I; I += Is;
					*(O +  3) = * I; I += Is;
					*(O +  4) = * I; I += Is;
					*(O +  5) = * I; I += Is;
					*(O +  6) = * I; I += Is;
					*(O +  7) = * I; I += Is;
					*(O +  8) = * I; I += Is;
					*(O +  9) = * I; I += Is;
					*(O + 10) = * I; I += Is;
					*(O + 11) = * I; I += Is;
					*(O + 12) = * I; I += Is;
					*(O + 13) = * I; I += Is;
					*(O + 14) = * I; I += Is;
					*(O + 15) = * I; I += Is;
					*(O + 16) = * I; I += Is;
					*(O + 17) = * I; I += Is;
					*(O + 18) = * I; I += Is;
					*(O + 19) = * I; I += Is;
					*(O + 20) = * I; I += Is;
					*(O + 21) = * I; I += Is;
					*(O + 22) = * I; I += Is;
					*(O + 23) = * I; I += Is;
					*(O + 24) = * I; I += Is;
					*(O + 25) = * I; I += Is;
					*(O + 26) = * I; I += Is;
					*(O + 27) = * I; I += Is;
					*(O + 28) = * I; I += Is;
					*(O + 29) = * I; I += Is;
					*(O + 30) = * I; I += Is;
					*(O + 31) = * I; I += Is;
					*(O + 32) = * I; I += Is;
					*(O + 33) = * I; I += Is;
					*(O + 34) = * I; I += Is;
					*(O + 35) = * I; I += Is;
					*(O + 36) = * I; I += Is;
					*(O + 37) = * I; I += Is;
					*(O + 38) = * I; I += Is;
					*(O + 39) = * I; I += Is;
					*(O + 40) = * I; I += Is;
					*(O + 41) = * I; I += Is;
					*(O + 42) = * I; I += Is;
					*(O + 43) = * I; I += Is;
					*(O + 44) = * I; I += Is;
					*(O + 45) = * I; I += Is;
					*(O + 46) = * I; I += Is;
					*(O + 47) = * I; I += Is;
					*(O + 48) = * I; I += Is;
					*(O + 49) = * I; I += Is;
					*(O + 50) = * I; I += Is;
					*(O + 51) = * I; I += Is;
					*(O + 52) = * I; I += Is;
					*(O + 53) = * I; I += Is;
					*(O + 54) = * I; I += Is;
					*(O + 55) = * I; I += Is;
					*(O + 56) = * I; I += Is;
					*(O + 57) = * I; I += Is;
					*(O + 58) = * I; I += Is;
					*(O + 59) = * I; I += Is;
					*(O + 60) = * I; I += Is;
					*(O + 61) = * I; I += Is;
					*(O + 62) = * I; I += Is;
					*(O + 63) = * I; I += Is;
					O += 64;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o = *I;
				for (; i; i--) {
					*(O +  0 * Os) = o; 
					*(O +  1 * Os) = o; 
					*(O +  2 * Os) = o; 
					*(O +  3 * Os) = o; 
					*(O +  4 * Os) = o; 
					*(O +  5 * Os) = o; 
					*(O +  6 * Os) = o; 
					*(O +  7 * Os) = o; 
					*(O +  8 * Os) = o; 
					*(O +  9 * Os) = o; 
					*(O + 10 * Os) = o; 
					*(O + 11 * Os) = o; 
					*(O + 12 * Os) = o; 
					*(O + 13 * Os) = o; 
					*(O + 14 * Os) = o; 
					*(O + 15 * Os) = o; 
					*(O + 16 * Os) = o; 
					*(O + 17 * Os) = o; 
					*(O + 18 * Os) = o; 
					*(O + 19 * Os) = o; 
					*(O + 20 * Os) = o; 
					*(O + 21 * Os) = o; 
					*(O + 22 * Os) = o; 
					*(O + 23 * Os) = o; 
					*(O + 24 * Os) = o; 
					*(O + 25 * Os) = o; 
					*(O + 26 * Os) = o; 
					*(O + 27 * Os) = o; 
					*(O + 28 * Os) = o; 
					*(O + 29 * Os) = o; 
					*(O + 30 * Os) = o; 
					*(O + 31 * Os) = o; 
					*(O + 32 * Os) = o; 
					*(O + 33 * Os) = o; 
					*(O + 34 * Os) = o; 
					*(O + 35 * Os) = o; 
					*(O + 36 * Os) = o; 
					*(O + 37 * Os) = o; 
					*(O + 38 * Os) = o; 
					*(O + 39 * Os) = o; 
					*(O + 40 * Os) = o; 
					*(O + 41 * Os) = o; 
					*(O + 42 * Os) = o; 
					*(O + 43 * Os) = o; 
					*(O + 44 * Os) = o; 
					*(O + 45 * Os) = o; 
					*(O + 46 * Os) = o; 
					*(O + 47 * Os) = o; 
					*(O + 48 * Os) = o; 
					*(O + 49 * Os) = o; 
					*(O + 50 * Os) = o; 
					*(O + 51 * Os) = o; 
					*(O + 52 * Os) = o; 
					*(O + 53 * Os) = o; 
					*(O + 54 * Os) = o; 
					*(O + 55 * Os) = o; 
					*(O + 56 * Os) = o; 
					*(O + 57 * Os) = o; 
					*(O + 58 * Os) = o; 
					*(O + 59 * Os) = o; 
					*(O + 60 * Os) = o; 
					*(O + 61 * Os) = o; 
					*(O + 62 * Os) = o; 
					*(O + 63 * Os) = o; 
					O += 64 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O +  0 * Os) = *(I +  0);
					*(O +  1 * Os) = *(I +  1);
					*(O +  2 * Os) = *(I +  2);
					*(O +  3 * Os) = *(I +  3);
					*(O +  4 * Os) = *(I +  4);
					*(O +  5 * Os) = *(I +  5);
					*(O +  6 * Os) = *(I +  6);
					*(O +  7 * Os) = *(I +  7);
					*(O +  8 * Os) = *(I +  8);
					*(O +  9 * Os) = *(I +  9);
					*(O + 10 * Os) = *(I +  0);
					*(O + 11 * Os) = *(I + 11);
					*(O + 12 * Os) = *(I + 12);
					*(O + 13 * Os) = *(I + 13);
					*(O + 14 * Os) = *(I + 14);
					*(O + 15 * Os) = *(I + 15);
					*(O + 16 * Os) = *(I + 16);
					*(O + 17 * Os) = *(I + 17);
					*(O + 18 * Os) = *(I + 18);
					*(O + 19 * Os) = *(I + 19);
					*(O + 20 * Os) = *(I + 20);
					*(O + 21 * Os) = *(I + 21);
					*(O + 22 * Os) = *(I + 22);
					*(O + 23 * Os) = *(I + 23);
					*(O + 24 * Os) = *(I + 24);
					*(O + 25 * Os) = *(I + 25);
					*(O + 26 * Os) = *(I + 26);
					*(O + 27 * Os) = *(I + 27);
					*(O + 28 * Os) = *(I + 28);
					*(O + 29 * Os) = *(I + 29);
					*(O + 30 * Os) = *(I + 30);
					*(O + 31 * Os) = *(I + 31);
					*(O + 32 * Os) = *(I + 32);
					*(O + 33 * Os) = *(I + 33);
					*(O + 34 * Os) = *(I + 34);
					*(O + 35 * Os) = *(I + 35);
					*(O + 36 * Os) = *(I + 36);
					*(O + 37 * Os) = *(I + 37);
					*(O + 38 * Os) = *(I + 38);
					*(O + 39 * Os) = *(I + 39);
					*(O + 40 * Os) = *(I + 40);
					*(O + 41 * Os) = *(I + 41);
					*(O + 42 * Os) = *(I + 42);
					*(O + 43 * Os) = *(I + 43);
					*(O + 44 * Os) = *(I + 44);
					*(O + 45 * Os) = *(I + 45);
					*(O + 46 * Os) = *(I + 46);
					*(O + 47 * Os) = *(I + 47);
					*(O + 48 * Os) = *(I + 48);
					*(O + 49 * Os) = *(I + 49);
					*(O + 50 * Os) = *(I + 50);
					*(O + 51 * Os) = *(I + 51);
					*(O + 52 * Os) = *(I + 52);
					*(O + 53 * Os) = *(I + 53);
					*(O + 54 * Os) = *(I + 54);
					*(O + 55 * Os) = *(I + 55);
					*(O + 56 * Os) = *(I + 56);
					*(O + 57 * Os) = *(I + 57);
					*(O + 58 * Os) = *(I + 58);
					*(O + 59 * Os) = *(I + 59);
					*(O + 60 * Os) = *(I + 60);
					*(O + 61 * Os) = *(I + 61);
					*(O + 62 * Os) = *(I + 62);
					*(O + 63 * Os) = *(I + 63);
					I += 64;
					O += 64 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O +  0 * Os) = * I; I += Is;
					*(O +  1 * Os) = * I; I += Is;
					*(O +  2 * Os) = * I; I += Is;
					*(O +  3 * Os) = * I; I += Is;
					*(O +  4 * Os) = * I; I += Is;
					*(O +  5 * Os) = * I; I += Is;
					*(O +  6 * Os) = * I; I += Is;
					*(O +  7 * Os) = * I; I += Is;
					*(O +  8 * Os) = * I; I += Is;
					*(O +  9 * Os) = * I; I += Is;
					*(O + 10 * Os) = * I; I += Is;
					*(O + 11 * Os) = * I; I += Is;
					*(O + 12 * Os) = * I; I += Is;
					*(O + 13 * Os) = * I; I += Is;
					*(O + 14 * Os) = * I; I += Is;
					*(O + 15 * Os) = * I; I += Is;
					*(O + 16 * Os) = * I; I += Is;
					*(O + 17 * Os) = * I; I += Is;
					*(O + 18 * Os) = * I; I += Is;
					*(O + 19 * Os) = * I; I += Is;
					*(O + 20 * Os) = * I; I += Is;
					*(O + 21 * Os) = * I; I += Is;
					*(O + 22 * Os) = * I; I += Is;
					*(O + 23 * Os) = * I; I += Is;
					*(O + 24 * Os) = * I; I += Is;
					*(O + 25 * Os) = * I; I += Is;
					*(O + 26 * Os) = * I; I += Is;
					*(O + 27 * Os) = * I; I += Is;
					*(O + 28 * Os) = * I; I += Is;
					*(O + 29 * Os) = * I; I += Is;
					*(O + 30 * Os) = * I; I += Is;
					*(O + 31 * Os) = * I; I += Is;
					*(O + 32 * Os) = * I; I += Is;
					*(O + 33 * Os) = * I; I += Is;
					*(O + 34 * Os) = * I; I += Is;
					*(O + 35 * Os) = * I; I += Is;
					*(O + 36 * Os) = * I; I += Is;
					*(O + 37 * Os) = * I; I += Is;
					*(O + 38 * Os) = * I; I += Is;
					*(O + 39 * Os) = * I; I += Is;
					*(O + 40 * Os) = * I; I += Is;
					*(O + 41 * Os) = * I; I += Is;
					*(O + 42 * Os) = * I; I += Is;
					*(O + 43 * Os) = * I; I += Is;
					*(O + 44 * Os) = * I; I += Is;
					*(O + 45 * Os) = * I; I += Is;
					*(O + 46 * Os) = * I; I += Is;
					*(O + 47 * Os) = * I; I += Is;
					*(O + 48 * Os) = * I; I += Is;
					*(O + 49 * Os) = * I; I += Is;
					*(O + 50 * Os) = * I; I += Is;
					*(O + 51 * Os) = * I; I += Is;
					*(O + 52 * Os) = * I; I += Is;
					*(O + 53 * Os) = * I; I += Is;
					*(O + 54 * Os) = * I; I += Is;
					*(O + 55 * Os) = * I; I += Is;
					*(O + 56 * Os) = * I; I += Is;
					*(O + 57 * Os) = * I; I += Is;
					*(O + 58 * Os) = * I; I += Is;
					*(O + 59 * Os) = * I; I += Is;
					*(O + 60 * Os) = * I; I += Is;
					*(O + 61 * Os) = * I; I += Is;
					*(O + 62 * Os) = * I; I += Is;
					*(O + 63 * Os) = * I; I += Is;
					O += 64 * Os;
				}
				break;
			}
		}
	}
	i = n & 63;
	if (i) {
		replicate_1x32(O, i, I, Os, Is); 
	}
}

//------------------------------------------------------------------------------
# endif
