# ifndef _replicate_2_txx
# define _replicate_2_txx

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x1 (T* O0, 
																	volatile const U n,
																	T* I0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

	register T o0, o1;
	register U i = n;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				O0 ++;
				O1 ++;
			}
		}
		else {
			for (; i; i--) {
				*(O0 +  Os * 0) = 0.; 
				*(O1 +  Os * 0) = 0.; 
				O0 += Os * 1;
				O1 += Os * 1;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					O0 ++;
					O1 ++;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					I0 ++;
					O0 ++;
					I1 ++;
					O1 ++;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					O0 ++;
					O1 ++;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					O0 += 1 * Os;
					O1 += 1 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					I0 ++;
					O0 += 1 * Os;
					I1 ++;
					O1 += 1 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					O0 += 1 * Os;
					O1 += 1 * Os;
				}
				break;
			}
		}
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x2 (T* O0, 
																	volatile const U n,
																	T* I0 = 0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

	register T o0, o1;
	register U i = n >> 1;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				*(O0 +  1) = 0.; 
				*(O1 +  1) = 0.; 
				O0 += 2;
				O1 += 2;
			}
		}
		else {
			for (; i; i--) {
				*(O0 +  Os * 0) = 0.; 
				*(O1 +  Os * 0) = 0.; 
				*(O0 +  Os * 1) = 0.; 
				*(O1 +  Os * 1) = 0.; 
				O0 += Os * 2;
				O1 += Os * 2;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					*(O0 +  1) = o0; 
					*(O1 +  1) = o1; 
					O0 += 2;
					O1 += 2;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					*(O0 +  1) = *(I0 +  1); 
					*(O1 +  1) = *(I1 +  1); 
					I0 += 2;
					O0 += 2;
					I1 += 2;
					O1 += 2;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					*(O0 +  1) = * I0; I0 += Is;
					*(O1 +  1) = * I1; I1 += Is;
					O0 += 2;
					O1 += 2;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					*(O0 +  1 * Os) = o0; 
					*(O1 +  1 * Os) = o1; 
					O0 += 2 * Os;
					O1 += 2 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					*(O0 +  1 * Os) = *(I0 +  1);
					*(O1 +  1 * Os) = *(I1 +  1);
					I0 += 2;
					O0 += 2 * Os;
					I1 += 2;
					O1 += 2 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					*(O0 +  1 * Os) = * I0; I0 += Is;
					*(O1 +  1 * Os) = * I1; I1 += Is;
					O0 += 2 * Os;
					O1 += 2 * Os;
				}
				break;
			}
		}
	}
	i = n & 1;
	if (i) {
		replicate_2x1(O0, i, I0, oS, iS, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x4 (T* O0, 
																	volatile const U n,
																	T* I0 = 0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

	register T o0, o1;
	register U i = n >> 2;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				*(O0 +  1) = 0.; 
				*(O1 +  1) = 0.; 
				*(O0 +  2) = 0.; 
				*(O1 +  2) = 0.; 
				*(O0 +  3) = 0.; 
				*(O1 +  3) = 0.; 
				O0 += 4;
				O1 += 4;
			}
		}
		else {
			for (; i; i--) {
				*(O0 +  Os * 0) = 0.; 
				*(O1 +  Os * 0) = 0.; 
				*(O0 +  Os * 1) = 0.; 
				*(O1 +  Os * 1) = 0.; 
				*(O0 +  Os * 2) = 0.; 
				*(O1 +  Os * 2) = 0.; 
				*(O0 +  Os * 3) = 0.; 
				*(O1 +  Os * 3) = 0.; 
				O0 += Os * 4;
				O1 += Os * 4;
			}
		}
	}
	else if (Os == 1) {
	  switch (Is) {
		  case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					*(O0 +  1) = o0; 
					*(O1 +  1) = o1; 
					*(O0 +  2) = o0; 
					*(O1 +  2) = o1; 
					*(O0 +  3) = o0; 
					*(O1 +  3) = o1; 
					O0 += 4;
					O1 += 4;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					*(O0 +  1) = *(I0 +  1); 
					*(O1 +  1) = *(I1 +  1); 
					*(O0 +  2) = *(I0 +  2); 
					*(O1 +  2) = *(I1 +  2); 
					*(O0 +  3) = *(I0 +  3); 
					*(O1 +  3) = *(I1 +  3); 
					I0 += 4;
					O0 += 4;
					I1 += 4;
					O1 += 4;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					*(O0 +  1) = * I0; I0 += Is;
					*(O1 +  1) = * I1; I1 += Is;
					*(O0 +  2) = * I0; I0 += Is;
					*(O1 +  2) = * I1; I1 += Is;
					*(O0 +  3) = * I0; I0 += Is;
					*(O1 +  3) = * I1; I1 += Is;
					O0 += 4;
					O1 += 4;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					*(O0 +  1 * Os) = o0; 
					*(O1 +  1 * Os) = o1; 
					*(O0 +  2 * Os) = o0; 
					*(O1 +  2 * Os) = o1; 
					*(O0 +  3 * Os) = o0; 
					*(O1 +  3 * Os) = o1; 
					O0 += 4 * Os;
					O1 += 4 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					*(O0 +  1 * Os) = *(I0 +  1);
					*(O1 +  1 * Os) = *(I1 +  1);
					*(O0 +  2 * Os) = *(I0 +  2);
					*(O1 +  2 * Os) = *(I1 +  2);
					*(O0 +  3 * Os) = *(I0 +  3);
					*(O1 +  3 * Os) = *(I1 +  3);
					I0 += 4;
					O0 += 4 * Os;
					I1 += 4;
					O1 += 4 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					*(O0 +  1 * Os) = * I0; I0 += Is;
					*(O1 +  1 * Os) = * I1; I1 += Is;
					*(O0 +  2 * Os) = * I0; I0 += Is;
					*(O1 +  2 * Os) = * I1; I1 += Is;
					*(O0 +  3 * Os) = * I0; I0 += Is;
					*(O1 +  3 * Os) = * I1; I1 += Is;
					O0 += 4 * Os;
					O1 += 4 * Os;
				}
				break;
			}
		}
	}
	i = n & 3;
	if (i) {
		replicate_2x2(O0, i, I0, oS, iS, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x8 (T* O0, 
																	volatile const U n,
																	T* I0 = 0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

  if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

	register T o0, o1;
	register U i = n >> 3;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				*(O0 +  1) = 0.; 
				*(O1 +  1) = 0.; 
				*(O0 +  2) = 0.; 
				*(O1 +  2) = 0.; 
				*(O0 +  3) = 0.; 
				*(O1 +  3) = 0.; 
				*(O0 +  4) = 0.; 
				*(O1 +  4) = 0.; 
				*(O0 +  5) = 0.; 
				*(O1 +  5) = 0.; 
				*(O0 +  6) = 0.; 
				*(O1 +  6) = 0.; 
				*(O0 +  7) = 0.; 
				*(O1 +  7) = 0.; 
				O0 += 8;
				O1 += 8;
			}
		}
		else {
			for (; i; i--) {
				*(O0 +  Os * 0) = 0.; 
				*(O1 +  Os * 0) = 0.; 
				*(O0 +  Os * 1) = 0.; 
				*(O1 +  Os * 1) = 0.; 
				*(O0 +  Os * 2) = 0.; 
				*(O1 +  Os * 2) = 0.; 
				*(O0 +  Os * 3) = 0.; 
				*(O1 +  Os * 3) = 0.; 
				*(O0 +  Os * 4) = 0.; 
				*(O1 +  Os * 4) = 0.; 
				*(O0 +  Os * 5) = 0.; 
				*(O1 +  Os * 5) = 0.; 
				*(O0 +  Os * 6) = 0.; 
				*(O1 +  Os * 6) = 0.; 
				*(O0 +  Os * 7) = 0.; 
				*(O1 +  Os * 7) = 0.; 
				O0 += Os * 8;
				O1 += Os * 8;
			}
		}
	}
	else if (Os == 1) {
	  switch (Is) {
		  case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					*(O0 +  1) = o0; 
					*(O1 +  1) = o1; 
					*(O0 +  2) = o0; 
					*(O1 +  2) = o1; 
					*(O0 +  3) = o0; 
					*(O1 +  3) = o1; 
					*(O0 +  4) = o0; 
					*(O1 +  4) = o1; 
					*(O0 +  5) = o0; 
					*(O1 +  5) = o1; 
					*(O0 +  6) = o0; 
					*(O1 +  6) = o1; 
					*(O0 +  7) = o0; 
					*(O1 +  7) = o1; 
					O0 += 8;
					O1 += 8;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					*(O0 +  1) = *(I0 +  1); 
					*(O1 +  1) = *(I1 +  1); 
					*(O0 +  2) = *(I0 +  2); 
					*(O1 +  2) = *(I1 +  2); 
					*(O0 +  3) = *(I0 +  3); 
					*(O1 +  3) = *(I1 +  3); 
					*(O0 +  4) = *(I0 +  4); 
					*(O1 +  4) = *(I1 +  4); 
					*(O0 +  5) = *(I0 +  5); 
					*(O1 +  5) = *(I1 +  5); 
					*(O0 +  6) = *(I0 +  6); 
					*(O1 +  6) = *(I1 +  6); 
					*(O0 +  7) = *(I0 +  7); 
					*(O1 +  7) = *(I1 +  7); 
					I0 += 8;
					O0 += 8;
					I1 += 8;
					O1 += 8;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					*(O0 +  1) = * I0; I0 += Is;
					*(O1 +  1) = * I1; I1 += Is;
					*(O0 +  2) = * I0; I0 += Is;
					*(O1 +  2) = * I1; I1 += Is;
					*(O0 +  3) = * I0; I0 += Is;
					*(O1 +  3) = * I1; I1 += Is;
					*(O0 +  4) = * I0; I0 += Is;
					*(O1 +  4) = * I1; I1 += Is;
					*(O0 +  5) = * I0; I0 += Is;
					*(O1 +  5) = * I1; I1 += Is;
					*(O0 +  6) = * I0; I0 += Is;
					*(O1 +  6) = * I1; I1 += Is;
					*(O0 +  7) = * I0; I0 += Is;
					*(O1 +  7) = * I1; I1 += Is;
					O0 += 8;
					O1 += 8;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					*(O0 +  1 * Os) = o0; 
					*(O1 +  1 * Os) = o1; 
					*(O0 +  2 * Os) = o0; 
					*(O1 +  2 * Os) = o1; 
					*(O0 +  3 * Os) = o0; 
					*(O1 +  3 * Os) = o1; 
					*(O0 +  4 * Os) = o0; 
					*(O1 +  4 * Os) = o1; 
					*(O0 +  5 * Os) = o0; 
					*(O1 +  5 * Os) = o1; 
					*(O0 +  6 * Os) = o0; 
					*(O1 +  6 * Os) = o1; 
					*(O0 +  7 * Os) = o0; 
					*(O1 +  7 * Os) = o1; 
					O0 += 8 * Os;
					O1 += 8 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					*(O0 +  1 * Os) = *(I0 +  1);
					*(O1 +  1 * Os) = *(I1 +  1);
					*(O0 +  2 * Os) = *(I0 +  2);
					*(O1 +  2 * Os) = *(I1 +  2);
					*(O0 +  3 * Os) = *(I0 +  3);
					*(O1 +  3 * Os) = *(I1 +  3);
					*(O0 +  4 * Os) = *(I0 +  4);
					*(O1 +  4 * Os) = *(I1 +  4);
					*(O0 +  5 * Os) = *(I0 +  5);
					*(O1 +  5 * Os) = *(I1 +  5);
					*(O0 +  6 * Os) = *(I0 +  6);
					*(O1 +  6 * Os) = *(I1 +  6);
					*(O0 +  7 * Os) = *(I0 +  7);
					*(O1 +  7 * Os) = *(I1 +  7);
					I0 += 8;
					O0 += 8 * Os;
					I1 += 8;
					O1 += 8 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					*(O0 +  1 * Os) = * I0; I0 += Is;
					*(O1 +  1 * Os) = * I1; I1 += Is;
					*(O0 +  2 * Os) = * I0; I0 += Is;
					*(O1 +  2 * Os) = * I1; I1 += Is;
					*(O0 +  3 * Os) = * I0; I0 += Is;
					*(O1 +  3 * Os) = * I1; I1 += Is;
					*(O0 +  4 * Os) = * I0; I0 += Is;
					*(O1 +  4 * Os) = * I1; I1 += Is;
					*(O0 +  5 * Os) = * I0; I0 += Is;
					*(O1 +  5 * Os) = * I1; I1 += Is;
					*(O0 +  6 * Os) = * I0; I0 += Is;
					*(O1 +  6 * Os) = * I1; I1 += Is;
					*(O0 +  7 * Os) = * I0; I0 += Is;
					*(O1 +  7 * Os) = * I1; I1 += Is;
					O0 += 8 * Os;
					O1 += 8 * Os;
				}
				break;
			}
		}
	}
	i = n & 7;
	if (i) {
		replicate_2x4(O0, i, I0, oS, iS, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x16(T* O0, 
																	volatile const U n,
																	T* I0 = 0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

  register T o0, o1;
	register U i = n >> 4;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				*(O0 +  1) = 0.; 
				*(O1 +  1) = 0.; 
				*(O0 +  2) = 0.; 
				*(O1 +  2) = 0.; 
				*(O0 +  3) = 0.; 
				*(O1 +  3) = 0.; 
				*(O0 +  4) = 0.; 
				*(O1 +  4) = 0.; 
				*(O0 +  5) = 0.; 
				*(O1 +  5) = 0.; 
				*(O0 +  6) = 0.; 
				*(O1 +  6) = 0.; 
				*(O0 +  7) = 0.; 
				*(O1 +  7) = 0.; 
				*(O0 +  8) = 0.; 
				*(O1 +  8) = 0.; 
				*(O0 +  9) = 0.; 
				*(O1 +  9) = 0.; 
				*(O0 + 10) = 0.; 
				*(O1 + 10) = 0.; 
				*(O0 + 11) = 0.; 
				*(O1 + 11) = 0.; 
				*(O0 + 12) = 0.; 
				*(O1 + 12) = 0.; 
				*(O0 + 13) = 0.; 
				*(O1 + 13) = 0.; 
				*(O0 + 14) = 0.; 
				*(O1 + 14) = 0.; 
				*(O0 + 15) = 0.; 
				*(O1 + 15) = 0.; 
				O0 += 16;
				O1 += 16;
			}
		}
		else {
			for (; i; i--) {
				*(O0 + Os *  0) = 0.; 
				*(O1 + Os *  0) = 0.; 
				*(O0 + Os *  1) = 0.; 
				*(O1 + Os *  1) = 0.; 
				*(O0 + Os *  2) = 0.; 
				*(O1 + Os *  2) = 0.; 
				*(O0 + Os *  3) = 0.; 
				*(O1 + Os *  3) = 0.; 
				*(O0 + Os *  4) = 0.; 
				*(O1 + Os *  4) = 0.; 
				*(O0 + Os *  5) = 0.; 
				*(O1 + Os *  5) = 0.; 
				*(O0 + Os *  6) = 0.; 
				*(O1 + Os *  6) = 0.; 
				*(O0 + Os *  7) = 0.; 
				*(O1 + Os *  7) = 0.; 
				*(O0 + Os *  8) = 0.; 
				*(O1 + Os *  8) = 0.; 
				*(O0 + Os *  9) = 0.; 
				*(O1 + Os *  9) = 0.; 
				*(O0 + Os * 10) = 0.; 
				*(O1 + Os * 10) = 0.; 
				*(O0 + Os * 11) = 0.; 
				*(O1 + Os * 11) = 0.; 
				*(O0 + Os * 12) = 0.; 
				*(O1 + Os * 12) = 0.; 
				*(O0 + Os * 13) = 0.; 
				*(O1 + Os * 13) = 0.; 
				*(O0 + Os * 14) = 0.; 
				*(O1 + Os * 14) = 0.; 
				*(O0 + Os * 15) = 0.; 
				*(O1 + Os * 15) = 0.; 
				O0 += Os * 16;
				O1 += Os * 16;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					*(O0 +  1) = o0; 
					*(O1 +  1) = o1; 
					*(O0 +  2) = o0; 
					*(O1 +  2) = o1; 
					*(O0 +  3) = o0; 
					*(O1 +  3) = o1; 
					*(O0 +  4) = o0; 
					*(O1 +  4) = o1; 
					*(O0 +  5) = o0; 
					*(O1 +  5) = o1; 
					*(O0 +  6) = o0; 
					*(O1 +  6) = o1; 
					*(O0 +  7) = o0; 
					*(O1 +  7) = o1; 
					*(O0 +  8) = o0; 
					*(O1 +  8) = o1; 
					*(O0 +  9) = o0; 
					*(O1 +  9) = o1; 
					*(O0 + 10) = o0; 
					*(O1 + 10) = o1; 
					*(O0 + 11) = o0; 
					*(O1 + 11) = o1; 
					*(O0 + 12) = o0; 
					*(O1 + 12) = o1; 
					*(O0 + 13) = o0; 
					*(O1 + 13) = o1; 
					*(O0 + 14) = o0; 
					*(O1 + 14) = o1; 
					*(O0 + 15) = o0; 
					*(O1 + 15) = o1; 
					O0 += 16;
					O1 += 16;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					*(O0 +  1) = *(I0 +  1); 
					*(O1 +  1) = *(I1 +  1); 
					*(O0 +  2) = *(I0 +  2); 
					*(O1 +  2) = *(I1 +  2); 
					*(O0 +  3) = *(I0 +  3); 
					*(O1 +  3) = *(I1 +  3); 
					*(O0 +  4) = *(I0 +  4); 
					*(O1 +  4) = *(I1 +  4); 
					*(O0 +  5) = *(I0 +  5); 
					*(O1 +  5) = *(I1 +  5); 
					*(O0 +  6) = *(I0 +  6); 
					*(O1 +  6) = *(I1 +  6); 
					*(O0 +  7) = *(I0 +  7); 
					*(O1 +  7) = *(I1 +  7); 
					*(O0 +  8) = *(I0 +  8); 
					*(O1 +  8) = *(I1 +  8); 
					*(O0 +  9) = *(I0 +  9); 
					*(O1 +  9) = *(I1 +  9); 
					*(O0 + 10) = *(I0 + 10); 
					*(O1 + 10) = *(I1 + 10); 
					*(O0 + 11) = *(I0 + 11); 
					*(O1 + 11) = *(I1 + 11); 
					*(O0 + 12) = *(I0 + 12); 
					*(O1 + 12) = *(I1 + 12); 
					*(O0 + 13) = *(I0 + 13); 
					*(O1 + 13) = *(I1 + 13); 
					*(O0 + 14) = *(I0 + 14); 
					*(O1 + 14) = *(I1 + 14); 
					*(O0 + 15) = *(I0 + 15); 
					*(O1 + 15) = *(I1 + 15); 
					I0 += 16;
					O0 += 16;
					I1 += 16;
					O1 += 16;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					*(O0 +  1) = * I0; I0 += Is;
					*(O1 +  1) = * I1; I1 += Is;
					*(O0 +  2) = * I0; I0 += Is;
					*(O1 +  2) = * I1; I1 += Is;
					*(O0 +  3) = * I0; I0 += Is;
					*(O1 +  3) = * I1; I1 += Is;
					*(O0 +  4) = * I0; I0 += Is;
					*(O1 +  4) = * I1; I1 += Is;
					*(O0 +  5) = * I0; I0 += Is;
					*(O1 +  5) = * I1; I1 += Is;
					*(O0 +  6) = * I0; I0 += Is;
					*(O1 +  6) = * I1; I1 += Is;
					*(O0 +  7) = * I0; I0 += Is;
					*(O1 +  7) = * I1; I1 += Is;
					*(O0 +  8) = * I0; I0 += Is;
					*(O1 +  8) = * I1; I1 += Is;
					*(O0 +  9) = * I0; I0 += Is;
					*(O1 +  9) = * I1; I1 += Is;
					*(O0 + 10) = * I0; I0 += Is;
					*(O1 + 10) = * I1; I1 += Is;
					*(O0 + 11) = * I0; I0 += Is;
					*(O1 + 11) = * I1; I1 += Is;
					*(O0 + 12) = * I0; I0 += Is;
					*(O1 + 12) = * I1; I1 += Is;
					*(O0 + 13) = * I0; I0 += Is;
					*(O1 + 13) = * I1; I1 += Is;
					*(O0 + 14) = * I0; I0 += Is;
					*(O1 + 14) = * I1; I1 += Is;
					*(O0 + 15) = * I0; I0 += Is;
					*(O1 + 15) = * I1; I1 += Is;
					O0 += 16;
					O1 += 16;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					*(O0 +  1 * Os) = o0; 
					*(O1 +  1 * Os) = o1; 
					*(O0 +  2 * Os) = o0; 
					*(O1 +  2 * Os) = o1; 
					*(O0 +  3 * Os) = o0; 
					*(O1 +  3 * Os) = o1; 
					*(O0 +  4 * Os) = o0; 
					*(O1 +  4 * Os) = o1; 
					*(O0 +  5 * Os) = o0; 
					*(O1 +  5 * Os) = o1; 
					*(O0 +  6 * Os) = o0; 
					*(O1 +  6 * Os) = o1; 
					*(O0 +  7 * Os) = o0; 
					*(O1 +  7 * Os) = o1; 
					*(O0 +  8 * Os) = o0; 
					*(O1 +  8 * Os) = o1; 
					*(O0 +  9 * Os) = o0; 
					*(O1 +  9 * Os) = o1; 
					*(O0 + 10 * Os) = o0; 
					*(O1 + 10 * Os) = o1; 
					*(O0 + 11 * Os) = o0; 
					*(O1 + 11 * Os) = o1; 
					*(O0 + 12 * Os) = o0; 
					*(O1 + 12 * Os) = o1; 
					*(O0 + 13 * Os) = o0; 
					*(O1 + 13 * Os) = o1; 
					*(O0 + 14 * Os) = o0; 
					*(O1 + 14 * Os) = o1; 
					*(O0 + 15 * Os) = o0; 
					*(O1 + 15 * Os) = o1; 
					O0 += 16 * Os;
					O1 += 16 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					*(O0 +  1 * Os) = *(I0 +  1);
					*(O1 +  1 * Os) = *(I1 +  1);
					*(O0 +  2 * Os) = *(I0 +  2);
					*(O1 +  2 * Os) = *(I1 +  2);
					*(O0 +  3 * Os) = *(I0 +  3);
					*(O1 +  3 * Os) = *(I1 +  3);
					*(O0 +  4 * Os) = *(I0 +  4);
					*(O1 +  4 * Os) = *(I1 +  4);
					*(O0 +  5 * Os) = *(I0 +  5);
					*(O1 +  5 * Os) = *(I1 +  5);
					*(O0 +  6 * Os) = *(I0 +  6);
					*(O1 +  6 * Os) = *(I1 +  6);
					*(O0 +  7 * Os) = *(I0 +  7);
					*(O1 +  7 * Os) = *(I1 +  7);
					*(O0 +  8 * Os) = *(I0 +  8);
					*(O1 +  8 * Os) = *(I1 +  8);
					*(O0 +  9 * Os) = *(I0 +  9);
					*(O1 +  9 * Os) = *(I1 +  9);
					*(O0 + 10 * Os) = *(I0 + 10);
					*(O1 + 10 * Os) = *(I1 + 10);
					*(O0 + 11 * Os) = *(I0 + 11);
					*(O1 + 11 * Os) = *(I1 + 11);
					*(O0 + 12 * Os) = *(I0 + 12);
					*(O1 + 12 * Os) = *(I1 + 12);
					*(O0 + 13 * Os) = *(I0 + 13);
					*(O1 + 13 * Os) = *(I1 + 13);
					*(O0 + 14 * Os) = *(I0 + 14);
					*(O1 + 14 * Os) = *(I1 + 14);
					*(O0 + 15 * Os) = *(I0 + 15);
					*(O1 + 15 * Os) = *(I1 + 15);
					I0 += 16;
					O0 += 16 * Os;
					I1 += 16;
					O1 += 16 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					*(O0 +  1 * Os) = * I0; I0 += Is;
					*(O1 +  1 * Os) = * I1; I1 += Is;
					*(O0 +  2 * Os) = * I0; I0 += Is;
					*(O1 +  2 * Os) = * I1; I1 += Is;
					*(O0 +  3 * Os) = * I0; I0 += Is;
					*(O1 +  3 * Os) = * I1; I1 += Is;
					*(O0 +  4 * Os) = * I0; I0 += Is;
					*(O1 +  4 * Os) = * I1; I1 += Is;
					*(O0 +  5 * Os) = * I0; I0 += Is;
					*(O1 +  5 * Os) = * I1; I1 += Is;
					*(O0 +  6 * Os) = * I0; I0 += Is;
					*(O1 +  6 * Os) = * I1; I1 += Is;
					*(O0 +  7 * Os) = * I0; I0 += Is;
					*(O1 +  7 * Os) = * I1; I1 += Is;
					*(O0 +  8 * Os) = * I0; I0 += Is;
					*(O1 +  8 * Os) = * I1; I1 += Is;
					*(O0 +  9 * Os) = * I0; I0 += Is;
					*(O1 +  9 * Os) = * I1; I1 += Is;
					*(O0 + 10 * Os) = * I0; I0 += Is;
					*(O1 + 10 * Os) = * I1; I1 += Is;
					*(O0 + 11 * Os) = * I0; I0 += Is;
					*(O1 + 11 * Os) = * I1; I1 += Is;
					*(O0 + 12 * Os) = * I0; I0 += Is;
					*(O1 + 12 * Os) = * I1; I1 += Is;
					*(O0 + 13 * Os) = * I0; I0 += Is;
					*(O1 + 13 * Os) = * I1; I1 += Is;
					*(O0 + 14 * Os) = * I0; I0 += Is;
					*(O1 + 14 * Os) = * I1; I1 += Is;
					*(O0 + 15 * Os) = * I0; I0 += Is;
					*(O1 + 15 * Os) = * I1; I1 += Is;
					O0 += 16 * Os;
					O1 += 16 * Os;
				}
				break;
			}
		}
	}
	i = n & 15;
	if (i) {
		replicate_2x8(O0, i, I0, oS, iS, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x32(T* O0, 
																	volatile const U n,
																	T* I0 = 0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

	register T o0, o1;
	register U i = n >> 5;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				*(O0 +  1) = 0.; 
				*(O1 +  1) = 0.; 
				*(O0 +  2) = 0.; 
				*(O1 +  2) = 0.; 
				*(O0 +  3) = 0.; 
				*(O1 +  3) = 0.; 
				*(O0 +  4) = 0.; 
				*(O1 +  4) = 0.; 
				*(O0 +  5) = 0.; 
				*(O1 +  5) = 0.; 
				*(O0 +  6) = 0.; 
				*(O1 +  6) = 0.; 
				*(O0 +  7) = 0.; 
				*(O1 +  7) = 0.; 
				*(O0 +  8) = 0.; 
				*(O1 +  8) = 0.; 
				*(O0 +  9) = 0.; 
				*(O1 +  9) = 0.; 
				*(O0 + 10) = 0.; 
				*(O1 + 10) = 0.; 
				*(O0 + 11) = 0.; 
				*(O1 + 11) = 0.; 
				*(O0 + 12) = 0.; 
				*(O1 + 12) = 0.; 
				*(O0 + 13) = 0.; 
				*(O1 + 13) = 0.; 
				*(O0 + 14) = 0.; 
				*(O1 + 14) = 0.; 
				*(O0 + 15) = 0.; 
				*(O1 + 15) = 0.; 
				*(O0 + 16) = 0.; 
				*(O1 + 16) = 0.; 
				*(O0 + 17) = 0.; 
				*(O1 + 17) = 0.; 
				*(O0 + 18) = 0.; 
				*(O1 + 18) = 0.; 
				*(O0 + 19) = 0.; 
				*(O1 + 19) = 0.; 
				*(O0 + 20) = 0.; 
				*(O1 + 20) = 0.; 
				*(O0 + 21) = 0.; 
				*(O1 + 21) = 0.; 
				*(O0 + 22) = 0.; 
				*(O1 + 22) = 0.; 
				*(O0 + 23) = 0.; 
				*(O1 + 23) = 0.; 
				*(O0 + 24) = 0.; 
				*(O1 + 24) = 0.; 
				*(O0 + 25) = 0.; 
				*(O1 + 25) = 0.; 
				*(O1 + 26) = 0.; 
				*(O0 + 27) = 0.; 
				*(O1 + 27) = 0.; 
				*(O0 + 28) = 0.; 
				*(O1 + 28) = 0.; 
				*(O0 + 29) = 0.; 
				*(O1 + 29) = 0.; 
				*(O0 + 30) = 0.; 
				*(O1 + 30) = 0.; 
				*(O0 + 31) = 0.; 
				*(O1 + 31) = 0.; 
				O0 += 32;
				O1 += 32;
			}
		}
		else {
			for (; i; i--) {
				*(O0 + Os *  0) = 0.; 
				*(O1 + Os *  0) = 0.; 
				*(O0 + Os *  1) = 0.; 
				*(O1 + Os *  1) = 0.; 
				*(O0 + Os *  2) = 0.; 
				*(O1 + Os *  2) = 0.; 
				*(O0 + Os *  3) = 0.; 
				*(O1 + Os *  3) = 0.; 
				*(O0 + Os *  4) = 0.; 
				*(O1 + Os *  4) = 0.; 
				*(O0 + Os *  5) = 0.; 
				*(O1 + Os *  5) = 0.; 
				*(O0 + Os *  6) = 0.; 
				*(O1 + Os *  6) = 0.; 
				*(O0 + Os *  7) = 0.; 
				*(O1 + Os *  7) = 0.; 
				*(O0 + Os *  8) = 0.; 
				*(O1 + Os *  8) = 0.; 
				*(O0 + Os *  9) = 0.; 
				*(O1 + Os *  9) = 0.; 
				*(O0 + Os * 10) = 0.; 
				*(O1 + Os * 10) = 0.; 
				*(O0 + Os * 11) = 0.; 
				*(O1 + Os * 11) = 0.; 
				*(O0 + Os * 12) = 0.; 
				*(O1 + Os * 12) = 0.; 
				*(O0 + Os * 13) = 0.; 
				*(O1 + Os * 13) = 0.; 
				*(O0 + Os * 14) = 0.; 
				*(O1 + Os * 14) = 0.; 
				*(O0 + Os * 15) = 0.; 
				*(O1 + Os * 15) = 0.; 
				*(O0 + Os * 16) = 0.; 
				*(O1 + Os * 16) = 0.; 
				*(O0 + Os * 17) = 0.; 
				*(O1 + Os * 17) = 0.; 
				*(O0 + Os * 18) = 0.; 
				*(O1 + Os * 18) = 0.; 
				*(O0 + Os * 19) = 0.; 
				*(O1 + Os * 19) = 0.; 
				*(O0 + Os * 20) = 0.; 
				*(O1 + Os * 20) = 0.; 
				*(O0 + Os * 21) = 0.; 
				*(O1 + Os * 21) = 0.; 
				*(O0 + Os * 22) = 0.; 
				*(O1 + Os * 22) = 0.; 
				*(O0 + Os * 23) = 0.; 
				*(O1 + Os * 23) = 0.; 
				*(O0 + Os * 24) = 0.; 
				*(O1 + Os * 24) = 0.; 
				*(O0 + Os * 25) = 0.; 
				*(O1 + Os * 25) = 0.; 
				*(O0 + Os * 26) = 0.; 
				*(O1 + Os * 26) = 0.; 
				*(O0 + Os * 27) = 0.; 
				*(O1 + Os * 27) = 0.; 
				*(O0 + Os * 28) = 0.; 
				*(O1 + Os * 28) = 0.; 
				*(O0 + Os * 29) = 0.; 
				*(O1 + Os * 29) = 0.; 
				*(O0 + Os * 30) = 0.; 
				*(O1 + Os * 30) = 0.; 
				*(O0 + Os * 31) = 0.; 
				*(O1 + Os * 31) = 0.; 
				O0 += Os * 32;
				O1 += Os * 32;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					*(O0 +  1) = o0; 
					*(O1 +  1) = o1; 
					*(O0 +  2) = o0; 
					*(O1 +  2) = o1; 
					*(O0 +  3) = o0; 
					*(O1 +  3) = o1; 
					*(O0 +  4) = o0; 
					*(O1 +  4) = o1; 
					*(O0 +  5) = o0; 
					*(O1 +  5) = o1; 
					*(O0 +  6) = o0; 
					*(O1 +  6) = o1; 
					*(O0 +  7) = o0; 
					*(O1 +  7) = o1; 
					*(O0 +  8) = o0; 
					*(O1 +  8) = o1; 
					*(O0 +  9) = o0; 
					*(O1 +  9) = o1; 
					*(O0 + 10) = o0; 
					*(O1 + 10) = o1; 
					*(O0 + 11) = o0; 
					*(O1 + 11) = o1; 
					*(O0 + 12) = o0; 
					*(O1 + 12) = o1; 
					*(O0 + 13) = o0; 
					*(O1 + 13) = o1; 
					*(O0 + 14) = o0; 
					*(O1 + 14) = o1; 
					*(O0 + 15) = o0; 
					*(O1 + 15) = o1; 
					*(O0 + 16) = o0; 
					*(O1 + 16) = o1; 
					*(O0 + 17) = o0; 
					*(O1 + 17) = o1; 
					*(O0 + 18) = o0; 
					*(O1 + 18) = o1; 
					*(O0 + 19) = o0; 
					*(O1 + 19) = o1; 
					*(O0 + 20) = o0; 
					*(O1 + 20) = o1; 
					*(O0 + 21) = o0; 
					*(O1 + 21) = o1; 
					*(O0 + 22) = o0; 
					*(O1 + 22) = o1; 
					*(O0 + 23) = o0; 
					*(O1 + 23) = o1; 
					*(O0 + 24) = o0; 
					*(O1 + 24) = o1; 
					*(O0 + 25) = o0; 
					*(O1 + 25) = o1; 
					*(O0 + 26) = o0; 
					*(O1 + 26) = o1; 
					*(O0 + 27) = o0; 
					*(O1 + 27) = o1; 
					*(O0 + 28) = o0; 
					*(O1 + 28) = o1; 
					*(O0 + 29) = o0; 
					*(O1 + 29) = o1; 
					*(O0 + 30) = o0; 
					*(O1 + 30) = o1; 
					*(O0 + 31) = o0; 
					*(O1 + 31) = o1; 
					O0 += 32;
					O1 += 32;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					*(O0 +  1) = *(I0 +  1); 
					*(O1 +  1) = *(I1 +  1); 
					*(O0 +  2) = *(I0 +  2); 
					*(O1 +  2) = *(I1 +  2); 
					*(O0 +  3) = *(I0 +  3); 
					*(O1 +  3) = *(I1 +  3); 
					*(O0 +  4) = *(I0 +  4); 
					*(O1 +  4) = *(I1 +  4); 
					*(O0 +  5) = *(I0 +  5); 
					*(O1 +  5) = *(I1 +  5); 
					*(O0 +  6) = *(I0 +  6); 
					*(O1 +  6) = *(I1 +  6); 
					*(O0 +  7) = *(I0 +  7); 
					*(O1 +  7) = *(I1 +  7); 
					*(O0 +  8) = *(I0 +  8); 
					*(O1 +  8) = *(I1 +  8); 
					*(O0 +  9) = *(I0 +  9); 
					*(O1 +  9) = *(I1 +  9); 
					*(O0 + 10) = *(I0 + 10); 
					*(O1 + 10) = *(I1 + 10); 
					*(O0 + 11) = *(I0 + 11); 
					*(O1 + 11) = *(I1 + 11); 
					*(O0 + 12) = *(I0 + 12); 
					*(O1 + 12) = *(I1 + 12); 
					*(O0 + 13) = *(I0 + 13); 
					*(O1 + 13) = *(I1 + 13); 
					*(O0 + 14) = *(I0 + 14); 
					*(O1 + 14) = *(I1 + 14); 
					*(O0 + 15) = *(I0 + 15); 
					*(O1 + 15) = *(I1 + 15); 
					*(O0 + 16) = *(I0 + 16); 
					*(O1 + 16) = *(I1 + 16); 
					*(O0 + 17) = *(I0 + 17); 
					*(O1 + 17) = *(I1 + 17); 
					*(O0 + 18) = *(I0 + 18); 
					*(O1 + 18) = *(I1 + 18); 
					*(O0 + 19) = *(I0 + 19); 
					*(O1 + 19) = *(I1 + 19); 
					*(O0 + 20) = *(I0 + 20); 
					*(O1 + 20) = *(I1 + 20); 
					*(O0 + 21) = *(I0 + 21); 
					*(O1 + 21) = *(I1 + 21); 
					*(O0 + 22) = *(I0 + 22); 
					*(O1 + 22) = *(I1 + 22); 
					*(O0 + 23) = *(I0 + 23); 
					*(O1 + 23) = *(I1 + 23); 
					*(O0 + 24) = *(I0 + 24); 
					*(O1 + 24) = *(I1 + 24); 
					*(O0 + 25) = *(I0 + 25); 
					*(O1 + 25) = *(I1 + 25); 
					*(O0 + 26) = *(I0 + 26); 
					*(O1 + 26) = *(I1 + 26); 
					*(O0 + 27) = *(I0 + 27); 
					*(O1 + 27) = *(I1 + 27); 
					*(O0 + 28) = *(I0 + 28); 
					*(O1 + 28) = *(I1 + 28); 
					*(O0 + 29) = *(I0 + 29); 
					*(O1 + 29) = *(I1 + 29); 
					*(O0 + 30) = *(I0 + 30); 
					*(O1 + 30) = *(I1 + 30); 
					*(O0 + 31) = *(I0 + 31); 
					*(O1 + 31) = *(I1 + 31); 
					I0 += 32;
					O0 += 32;
					I1 += 32;
					O1 += 32;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					*(O0 +  1) = * I0; I0 += Is;
					*(O1 +  1) = * I1; I1 += Is;
					*(O0 +  2) = * I0; I0 += Is;
					*(O1 +  2) = * I1; I1 += Is;
					*(O0 +  3) = * I0; I0 += Is;
					*(O1 +  3) = * I1; I1 += Is;
					*(O0 +  4) = * I0; I0 += Is;
					*(O1 +  4) = * I1; I1 += Is;
					*(O0 +  5) = * I0; I0 += Is;
					*(O1 +  5) = * I1; I1 += Is;
					*(O0 +  6) = * I0; I0 += Is;
					*(O1 +  6) = * I1; I1 += Is;
					*(O0 +  7) = * I0; I0 += Is;
					*(O1 +  7) = * I1; I1 += Is;
					*(O0 +  8) = * I0; I0 += Is;
					*(O1 +  8) = * I1; I1 += Is;
					*(O0 +  9) = * I0; I0 += Is;
					*(O1 +  9) = * I1; I1 += Is;
					*(O0 + 10) = * I0; I0 += Is;
					*(O1 + 10) = * I1; I1 += Is;
					*(O0 + 11) = * I0; I0 += Is;
					*(O1 + 11) = * I1; I1 += Is;
					*(O0 + 12) = * I0; I0 += Is;
					*(O1 + 12) = * I1; I1 += Is;
					*(O0 + 13) = * I0; I0 += Is;
					*(O1 + 13) = * I1; I1 += Is;
					*(O0 + 14) = * I0; I0 += Is;
					*(O1 + 14) = * I1; I1 += Is;
					*(O0 + 15) = * I0; I0 += Is;
					*(O1 + 15) = * I1; I1 += Is;
					*(O0 + 16) = * I0; I0 += Is;
					*(O1 + 16) = * I1; I1 += Is;
					*(O0 + 17) = * I0; I0 += Is;
					*(O1 + 17) = * I1; I1 += Is;
					*(O0 + 18) = * I0; I0 += Is;
					*(O1 + 18) = * I1; I1 += Is;
					*(O0 + 19) = * I0; I0 += Is;
					*(O1 + 19) = * I1; I1 += Is;
					*(O0 + 20) = * I0; I0 += Is;
					*(O1 + 20) = * I1; I1 += Is;
					*(O0 + 21) = * I0; I0 += Is;
					*(O1 + 21) = * I1; I1 += Is;
					*(O0 + 22) = * I0; I0 += Is;
					*(O1 + 22) = * I1; I1 += Is;
					*(O0 + 23) = * I0; I0 += Is;
					*(O1 + 23) = * I1; I1 += Is;
					*(O0 + 24) = * I0; I0 += Is;
					*(O1 + 24) = * I1; I1 += Is;
					*(O0 + 25) = * I0; I0 += Is;
					*(O1 + 25) = * I1; I1 += Is;
					*(O0 + 26) = * I0; I0 += Is;
					*(O1 + 26) = * I1; I1 += Is;
					*(O0 + 27) = * I0; I0 += Is;
					*(O1 + 27) = * I1; I1 += Is;
					*(O0 + 28) = * I0; I0 += Is;
					*(O1 + 28) = * I1; I1 += Is;
					*(O0 + 29) = * I0; I0 += Is;
					*(O1 + 29) = * I1; I1 += Is;
					*(O0 + 30) = * I0; I0 += Is;
					*(O1 + 30) = * I1; I1 += Is;
					*(O0 + 31) = * I0; I0 += Is;
					*(O1 + 31) = * I1; I1 += Is;
					O0 += 32;
					O1 += 32;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					*(O0 +  1 * Os) = o0; 
					*(O1 +  1 * Os) = o1; 
					*(O0 +  2 * Os) = o0; 
					*(O1 +  2 * Os) = o1; 
					*(O0 +  3 * Os) = o0; 
					*(O1 +  3 * Os) = o1; 
					*(O0 +  4 * Os) = o0; 
					*(O1 +  4 * Os) = o1; 
					*(O0 +  5 * Os) = o0; 
					*(O1 +  5 * Os) = o1; 
					*(O0 +  6 * Os) = o0; 
					*(O1 +  6 * Os) = o1; 
					*(O0 +  7 * Os) = o0; 
					*(O1 +  7 * Os) = o1; 
					*(O0 +  8 * Os) = o0; 
					*(O1 +  8 * Os) = o1; 
					*(O0 +  9 * Os) = o0; 
					*(O1 +  9 * Os) = o1; 
					*(O0 + 10 * Os) = o0; 
					*(O1 + 10 * Os) = o1; 
					*(O0 + 11 * Os) = o0; 
					*(O1 + 11 * Os) = o1; 
					*(O0 + 12 * Os) = o0; 
					*(O1 + 12 * Os) = o1; 
					*(O0 + 13 * Os) = o0; 
					*(O1 + 13 * Os) = o1; 
					*(O0 + 14 * Os) = o0; 
					*(O1 + 14 * Os) = o1; 
					*(O0 + 15 * Os) = o0; 
					*(O1 + 15 * Os) = o1; 
					*(O0 + 16 * Os) = o0; 
					*(O1 + 16 * Os) = o1; 
					*(O0 + 17 * Os) = o0; 
					*(O1 + 17 * Os) = o1; 
					*(O0 + 18 * Os) = o0; 
					*(O1 + 18 * Os) = o1; 
					*(O0 + 19 * Os) = o0; 
					*(O1 + 19 * Os) = o1; 
					*(O0 + 20 * Os) = o0; 
					*(O1 + 20 * Os) = o1; 
					*(O0 + 21 * Os) = o0; 
					*(O1 + 21 * Os) = o1; 
					*(O0 + 22 * Os) = o0; 
					*(O1 + 22 * Os) = o1; 
					*(O0 + 23 * Os) = o0; 
					*(O1 + 23 * Os) = o1; 
					*(O0 + 24 * Os) = o0; 
					*(O1 + 24 * Os) = o1; 
					*(O0 + 25 * Os) = o0; 
					*(O1 + 25 * Os) = o1; 
					*(O0 + 26 * Os) = o0; 
					*(O1 + 26 * Os) = o1; 
					*(O0 + 27 * Os) = o0; 
					*(O1 + 27 * Os) = o1; 
					*(O0 + 28 * Os) = o0; 
					*(O1 + 28 * Os) = o1; 
					*(O0 + 29 * Os) = o0; 
					*(O1 + 29 * Os) = o1; 
					*(O0 + 30 * Os) = o0; 
					*(O1 + 30 * Os) = o1; 
					*(O0 + 31 * Os) = o0; 
					*(O1 + 31 * Os) = o1; 
					O0 += 32 * Os;
					O1 += 32 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					*(O0 +  1 * Os) = *(I0 +  1);
					*(O1 +  1 * Os) = *(I1 +  1);
					*(O0 +  2 * Os) = *(I0 +  2);
					*(O1 +  2 * Os) = *(I1 +  2);
					*(O0 +  3 * Os) = *(I0 +  3);
					*(O1 +  3 * Os) = *(I1 +  3);
					*(O0 +  4 * Os) = *(I0 +  4);
					*(O1 +  4 * Os) = *(I1 +  4);
					*(O0 +  5 * Os) = *(I0 +  5);
					*(O1 +  5 * Os) = *(I1 +  5);
					*(O0 +  6 * Os) = *(I0 +  6);
					*(O1 +  6 * Os) = *(I1 +  6);
					*(O0 +  7 * Os) = *(I0 +  7);
					*(O1 +  7 * Os) = *(I1 +  7);
					*(O0 +  8 * Os) = *(I0 +  8);
					*(O1 +  8 * Os) = *(I1 +  8);
					*(O0 +  9 * Os) = *(I0 +  9);
					*(O1 +  9 * Os) = *(I1 +  9);
					*(O0 + 10 * Os) = *(I0 + 10);
					*(O1 + 10 * Os) = *(I1 + 10);
					*(O0 + 11 * Os) = *(I0 + 11);
					*(O1 + 11 * Os) = *(I1 + 11);
					*(O0 + 12 * Os) = *(I0 + 12);
					*(O1 + 12 * Os) = *(I1 + 12);
					*(O0 + 13 * Os) = *(I0 + 13);
					*(O1 + 13 * Os) = *(I1 + 13);
					*(O0 + 14 * Os) = *(I0 + 14);
					*(O1 + 14 * Os) = *(I1 + 14);
					*(O0 + 15 * Os) = *(I0 + 15);
					*(O1 + 15 * Os) = *(I1 + 15);
					*(O0 + 16 * Os) = *(I0 + 16);
					*(O1 + 16 * Os) = *(I1 + 16);
					*(O0 + 17 * Os) = *(I0 + 17);
					*(O1 + 17 * Os) = *(I1 + 17);
					*(O0 + 18 * Os) = *(I0 + 18);
					*(O1 + 18 * Os) = *(I1 + 18);
					*(O0 + 19 * Os) = *(I0 + 19);
					*(O1 + 19 * Os) = *(I1 + 19);
					*(O0 + 20 * Os) = *(I0 + 20);
					*(O1 + 20 * Os) = *(I1 + 20);
					*(O0 + 21 * Os) = *(I0 + 21);
					*(O1 + 21 * Os) = *(I1 + 21);
					*(O0 + 22 * Os) = *(I0 + 22);
					*(O1 + 22 * Os) = *(I1 + 22);
					*(O0 + 23 * Os) = *(I0 + 23);
					*(O1 + 23 * Os) = *(I1 + 23);
					*(O0 + 24 * Os) = *(I0 + 24);
					*(O1 + 24 * Os) = *(I1 + 24);
					*(O0 + 25 * Os) = *(I0 + 25);
					*(O1 + 25 * Os) = *(I1 + 25);
					*(O0 + 26 * Os) = *(I0 + 26);
					*(O1 + 26 * Os) = *(I1 + 26);
					*(O0 + 27 * Os) = *(I0 + 27);
					*(O1 + 27 * Os) = *(I1 + 27);
					*(O0 + 28 * Os) = *(I0 + 28);
					*(O1 + 28 * Os) = *(I1 + 28);
					*(O0 + 29 * Os) = *(I0 + 29);
					*(O1 + 29 * Os) = *(I1 + 29);
					*(O0 + 30 * Os) = *(I0 + 30);
					*(O1 + 30 * Os) = *(I1 + 30);
					*(O0 + 31 * Os) = *(I0 + 31);
					*(O1 + 31 * Os) = *(I1 + 31);
					I0 += 32;
					O0 += 32 * Os;
					I1 += 32;
					O1 += 32 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					*(O0 +  1 * Os) = * I0; I0 += Is;
					*(O1 +  1 * Os) = * I1; I1 += Is;
					*(O0 +  2 * Os) = * I0; I0 += Is;
					*(O1 +  2 * Os) = * I1; I1 += Is;
					*(O0 +  3 * Os) = * I0; I0 += Is;
					*(O1 +  3 * Os) = * I1; I1 += Is;
					*(O0 +  4 * Os) = * I0; I0 += Is;
					*(O1 +  4 * Os) = * I1; I1 += Is;
					*(O0 +  5 * Os) = * I0; I0 += Is;
					*(O1 +  5 * Os) = * I1; I1 += Is;
					*(O0 +  6 * Os) = * I0; I0 += Is;
					*(O1 +  6 * Os) = * I1; I1 += Is;
					*(O0 +  7 * Os) = * I0; I0 += Is;
					*(O1 +  7 * Os) = * I1; I1 += Is;
					*(O0 +  8 * Os) = * I0; I0 += Is;
					*(O1 +  8 * Os) = * I1; I1 += Is;
					*(O0 +  9 * Os) = * I0; I0 += Is;
					*(O1 +  9 * Os) = * I1; I1 += Is;
					*(O0 + 10 * Os) = * I0; I0 += Is;
					*(O1 + 10 * Os) = * I1; I1 += Is;
					*(O0 + 11 * Os) = * I0; I0 += Is;
					*(O1 + 11 * Os) = * I1; I1 += Is;
					*(O0 + 12 * Os) = * I0; I0 += Is;
					*(O1 + 12 * Os) = * I1; I1 += Is;
					*(O0 + 13 * Os) = * I0; I0 += Is;
					*(O1 + 13 * Os) = * I1; I1 += Is;
					*(O0 + 14 * Os) = * I0; I0 += Is;
					*(O1 + 14 * Os) = * I1; I1 += Is;
					*(O0 + 15 * Os) = * I0; I0 += Is;
					*(O1 + 15 * Os) = * I1; I1 += Is;
					*(O0 + 16 * Os) = * I0; I0 += Is;
					*(O1 + 16 * Os) = * I1; I1 += Is;
					*(O0 + 17 * Os) = * I0; I0 += Is;
					*(O1 + 17 * Os) = * I1; I1 += Is;
					*(O0 + 18 * Os) = * I0; I0 += Is;
					*(O1 + 18 * Os) = * I1; I1 += Is;
					*(O0 + 19 * Os) = * I0; I0 += Is;
					*(O1 + 19 * Os) = * I1; I1 += Is;
					*(O0 + 20 * Os) = * I0; I0 += Is;
					*(O1 + 20 * Os) = * I1; I1 += Is;
					*(O0 + 21 * Os) = * I0; I0 += Is;
					*(O1 + 21 * Os) = * I1; I1 += Is;
					*(O0 + 22 * Os) = * I0; I0 += Is;
					*(O1 + 22 * Os) = * I1; I1 += Is;
					*(O0 + 23 * Os) = * I0; I0 += Is;
					*(O1 + 23 * Os) = * I1; I1 += Is;
					*(O0 + 24 * Os) = * I0; I0 += Is;
					*(O1 + 24 * Os) = * I1; I1 += Is;
					*(O0 + 25 * Os) = * I0; I0 += Is;
					*(O1 + 25 * Os) = * I1; I1 += Is;
					*(O0 + 26 * Os) = * I0; I0 += Is;
					*(O1 + 26 * Os) = * I1; I1 += Is;
					*(O0 + 27 * Os) = * I0; I0 += Is;
					*(O1 + 27 * Os) = * I1; I1 += Is;
					*(O0 + 28 * Os) = * I0; I0 += Is;
					*(O1 + 28 * Os) = * I1; I1 += Is;
					*(O0 + 29 * Os) = * I0; I0 += Is;
					*(O1 + 29 * Os) = * I1; I1 += Is;
					*(O0 + 30 * Os) = * I0; I0 += Is;
					*(O1 + 30 * Os) = * I1; I1 += Is;
					*(O0 + 31 * Os) = * I0; I0 += Is;
					*(O1 + 31 * Os) = * I1; I1 += Is;
					O0 += 32 * Os;
					O1 += 32 * Os;
				}
				break;
			}
		}
	}
	i = n & 31;
	if (i) {
		replicate_2x16(O0, i, I0, oS, iS, Os, Is); 
	}
}

//------------------------------------------------------------------------------
template <class T, class U>
static inline void replicate_2x64(T* O0, 
																	volatile const U n,
																	T* I0 = 0, 
																	volatile const U oS = 1,
																	volatile const U iS = 0,
																	volatile const U Os = 1,
																	volatile const U Is = 0) {

	if (O0 == I0) { 
		return;
	}
	T* O1 = O0 + oS;
	T* I1 = I0 + iS;

	register T o0, o1;
	register U i = n >> 6;
  
	if (I0 == 0) { 
		if (Os == 1) {
			for (; i; i--) {
				*(O0 +  0) = 0.; 
				*(O1 +  0) = 0.; 
				*(O0 +  1) = 0.; 
				*(O1 +  1) = 0.; 
				*(O0 +  2) = 0.; 
				*(O1 +  2) = 0.; 
				*(O0 +  3) = 0.; 
				*(O1 +  3) = 0.; 
				*(O0 +  4) = 0.; 
				*(O1 +  4) = 0.; 
				*(O0 +  5) = 0.; 
				*(O1 +  5) = 0.; 
				*(O0 +  6) = 0.; 
				*(O1 +  6) = 0.; 
				*(O0 +  7) = 0.; 
				*(O1 +  7) = 0.; 
				*(O0 +  8) = 0.; 
				*(O1 +  8) = 0.; 
				*(O0 +  9) = 0.; 
				*(O1 +  9) = 0.; 
				*(O0 + 10) = 0.; 
				*(O1 + 10) = 0.; 
				*(O0 + 11) = 0.; 
				*(O1 + 11) = 0.; 
				*(O0 + 12) = 0.; 
				*(O1 + 12) = 0.; 
				*(O0 + 13) = 0.; 
				*(O1 + 13) = 0.; 
				*(O0 + 14) = 0.; 
				*(O1 + 14) = 0.; 
				*(O0 + 15) = 0.; 
				*(O1 + 15) = 0.; 
				*(O0 + 16) = 0.; 
				*(O1 + 16) = 0.; 
				*(O0 + 17) = 0.; 
				*(O1 + 17) = 0.; 
				*(O0 + 18) = 0.; 
				*(O1 + 18) = 0.; 
				*(O0 + 19) = 0.; 
				*(O1 + 19) = 0.; 
				*(O0 + 20) = 0.; 
				*(O1 + 20) = 0.; 
				*(O0 + 21) = 0.; 
				*(O1 + 21) = 0.; 
				*(O0 + 22) = 0.; 
				*(O1 + 22) = 0.; 
				*(O0 + 23) = 0.; 
				*(O1 + 23) = 0.; 
				*(O0 + 24) = 0.; 
				*(O1 + 24) = 0.; 
				*(O0 + 25) = 0.; 
				*(O1 + 25) = 0.; 
				*(O1 + 26) = 0.; 
				*(O0 + 27) = 0.; 
				*(O1 + 27) = 0.; 
				*(O0 + 28) = 0.; 
				*(O1 + 28) = 0.; 
				*(O0 + 29) = 0.; 
				*(O1 + 29) = 0.; 
				*(O0 + 30) = 0.; 
				*(O1 + 30) = 0.; 
				*(O0 + 31) = 0.; 
				*(O1 + 31) = 0.; 
				*(O0 + 32) = 0.; 
				*(O1 + 32) = 0.; 
				*(O0 + 33) = 0.; 
				*(O1 + 33) = 0.; 
				*(O0 + 34) = 0.; 
				*(O1 + 34) = 0.; 
				*(O0 + 35) = 0.; 
				*(O1 + 35) = 0.; 
				*(O0 + 36) = 0.; 
				*(O1 + 36) = 0.; 
				*(O0 + 37) = 0.; 
				*(O1 + 37) = 0.; 
				*(O0 + 38) = 0.; 
				*(O1 + 38) = 0.; 
				*(O0 + 39) = 0.; 
				*(O1 + 39) = 0.; 
				*(O0 + 40) = 0.; 
				*(O1 + 40) = 0.; 
				*(O0 + 41) = 0.; 
				*(O1 + 41) = 0.; 
				*(O0 + 42) = 0.; 
				*(O1 + 42) = 0.; 
				*(O0 + 43) = 0.; 
				*(O1 + 43) = 0.; 
				*(O0 + 44) = 0.; 
				*(O1 + 44) = 0.; 
				*(O0 + 45) = 0.; 
				*(O1 + 45) = 0.; 
				*(O0 + 46) = 0.; 
				*(O1 + 46) = 0.; 
				*(O0 + 47) = 0.; 
				*(O1 + 47) = 0.; 
				*(O0 + 48) = 0.; 
				*(O1 + 48) = 0.; 
				*(O0 + 49) = 0.; 
				*(O1 + 49) = 0.; 
				*(O0 + 50) = 0.; 
				*(O1 + 50) = 0.; 
				*(O0 + 51) = 0.; 
				*(O1 + 51) = 0.; 
				*(O0 + 52) = 0.; 
				*(O1 + 52) = 0.; 
				*(O0 + 53) = 0.; 
				*(O1 + 53) = 0.; 
				*(O0 + 54) = 0.; 
				*(O1 + 54) = 0.; 
				*(O0 + 55) = 0.; 
				*(O1 + 55) = 0.; 
				*(O1 + 56) = 0.; 
				*(O0 + 57) = 0.; 
				*(O1 + 57) = 0.; 
				*(O0 + 58) = 0.; 
				*(O1 + 58) = 0.; 
				*(O0 + 59) = 0.; 
				*(O1 + 59) = 0.; 
				*(O0 + 60) = 0.; 
				*(O1 + 60) = 0.; 
				*(O0 + 61) = 0.; 
				*(O1 + 61) = 0.; 
				*(O0 + 62) = 0.; 
				*(O1 + 62) = 0.; 
				*(O0 + 63) = 0.; 
				*(O1 + 63) = 0.; 
				O0 += 64;
				O1 += 64;
			}
		}
		else {
			for (; i; i--) {
				*(O0 + Os *  0) = 0.; 
				*(O1 + Os *  0) = 0.; 
				*(O0 + Os *  1) = 0.; 
				*(O1 + Os *  1) = 0.; 
				*(O0 + Os *  2) = 0.; 
				*(O1 + Os *  2) = 0.; 
				*(O0 + Os *  3) = 0.; 
				*(O1 + Os *  3) = 0.; 
				*(O0 + Os *  4) = 0.; 
				*(O1 + Os *  4) = 0.; 
				*(O0 + Os *  5) = 0.; 
				*(O1 + Os *  5) = 0.; 
				*(O0 + Os *  6) = 0.; 
				*(O1 + Os *  6) = 0.; 
				*(O0 + Os *  7) = 0.; 
				*(O1 + Os *  7) = 0.; 
				*(O0 + Os *  8) = 0.; 
				*(O1 + Os *  8) = 0.; 
				*(O0 + Os *  9) = 0.; 
				*(O1 + Os *  9) = 0.; 
				*(O0 + Os * 10) = 0.; 
				*(O1 + Os * 10) = 0.; 
				*(O0 + Os * 11) = 0.; 
				*(O1 + Os * 11) = 0.; 
				*(O0 + Os * 12) = 0.; 
				*(O1 + Os * 12) = 0.; 
				*(O0 + Os * 13) = 0.; 
				*(O1 + Os * 13) = 0.; 
				*(O0 + Os * 14) = 0.; 
				*(O1 + Os * 14) = 0.; 
				*(O0 + Os * 15) = 0.; 
				*(O1 + Os * 15) = 0.; 
				*(O0 + Os * 16) = 0.; 
				*(O1 + Os * 16) = 0.; 
				*(O0 + Os * 17) = 0.; 
				*(O1 + Os * 17) = 0.; 
				*(O0 + Os * 18) = 0.; 
				*(O1 + Os * 18) = 0.; 
				*(O0 + Os * 19) = 0.; 
				*(O1 + Os * 19) = 0.; 
				*(O0 + Os * 20) = 0.; 
				*(O1 + Os * 20) = 0.; 
				*(O0 + Os * 21) = 0.; 
				*(O1 + Os * 21) = 0.; 
				*(O0 + Os * 22) = 0.; 
				*(O1 + Os * 22) = 0.; 
				*(O0 + Os * 23) = 0.; 
				*(O1 + Os * 23) = 0.; 
				*(O0 + Os * 24) = 0.; 
				*(O1 + Os * 24) = 0.; 
				*(O0 + Os * 25) = 0.; 
				*(O1 + Os * 25) = 0.; 
				*(O0 + Os * 26) = 0.; 
				*(O1 + Os * 26) = 0.; 
				*(O0 + Os * 27) = 0.; 
				*(O1 + Os * 27) = 0.; 
				*(O0 + Os * 28) = 0.; 
				*(O1 + Os * 28) = 0.; 
				*(O0 + Os * 29) = 0.; 
				*(O1 + Os * 29) = 0.; 
				*(O0 + Os * 30) = 0.; 
				*(O1 + Os * 30) = 0.; 
				*(O0 + Os * 31) = 0.; 
				*(O1 + Os * 31) = 0.; 
				*(O0 + Os * 32) = 0.; 
				*(O1 + Os * 32) = 0.; 
				*(O0 + Os * 33) = 0.; 
				*(O1 + Os * 33) = 0.; 
				*(O0 + Os * 34) = 0.; 
				*(O1 + Os * 34) = 0.; 
				*(O0 + Os * 35) = 0.; 
				*(O1 + Os * 35) = 0.; 
				*(O0 + Os * 36) = 0.; 
				*(O1 + Os * 36) = 0.; 
				*(O0 + Os * 37) = 0.; 
				*(O1 + Os * 37) = 0.; 
				*(O0 + Os * 38) = 0.; 
				*(O1 + Os * 38) = 0.; 
				*(O0 + Os * 39) = 0.; 
				*(O1 + Os * 39) = 0.; 
				*(O0 + Os * 40) = 0.; 
				*(O1 + Os * 40) = 0.; 
				*(O0 + Os * 41) = 0.; 
				*(O1 + Os * 41) = 0.; 
				*(O0 + Os * 42) = 0.; 
				*(O1 + Os * 42) = 0.; 
				*(O0 + Os * 43) = 0.; 
				*(O1 + Os * 43) = 0.; 
				*(O0 + Os * 44) = 0.; 
				*(O1 + Os * 44) = 0.; 
				*(O0 + Os * 45) = 0.; 
				*(O1 + Os * 45) = 0.; 
				*(O0 + Os * 46) = 0.; 
				*(O1 + Os * 46) = 0.; 
				*(O0 + Os * 47) = 0.; 
				*(O1 + Os * 47) = 0.; 
				*(O0 + Os * 48) = 0.; 
				*(O1 + Os * 48) = 0.; 
				*(O0 + Os * 49) = 0.; 
				*(O1 + Os * 49) = 0.; 
				*(O0 + Os * 50) = 0.; 
				*(O1 + Os * 50) = 0.; 
				*(O0 + Os * 51) = 0.; 
				*(O1 + Os * 51) = 0.; 
				*(O0 + Os * 52) = 0.; 
				*(O1 + Os * 52) = 0.; 
				*(O0 + Os * 53) = 0.; 
				*(O1 + Os * 53) = 0.; 
				*(O0 + Os * 54) = 0.; 
				*(O1 + Os * 54) = 0.; 
				*(O0 + Os * 55) = 0.; 
				*(O1 + Os * 55) = 0.; 
				*(O0 + Os * 56) = 0.; 
				*(O1 + Os * 56) = 0.; 
				*(O0 + Os * 57) = 0.; 
				*(O1 + Os * 57) = 0.; 
				*(O0 + Os * 58) = 0.; 
				*(O1 + Os * 58) = 0.; 
				*(O0 + Os * 59) = 0.; 
				*(O1 + Os * 59) = 0.; 
				*(O0 + Os * 60) = 0.; 
				*(O1 + Os * 60) = 0.; 
				*(O0 + Os * 61) = 0.; 
				*(O1 + Os * 61) = 0.; 
				*(O0 + Os * 62) = 0.; 
				*(O1 + Os * 62) = 0.; 
				*(O0 + Os * 63) = 0.; 
				*(O1 + Os * 63) = 0.; 
				O0 += Os * 64;
				O1 += Os * 64;
			}
		}
	}
	else if (Os == 1) {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0) = o0; 
					*(O1 +  0) = o1; 
					*(O0 +  1) = o0; 
					*(O1 +  1) = o1; 
					*(O0 +  2) = o0; 
					*(O1 +  2) = o1; 
					*(O0 +  3) = o0; 
					*(O1 +  3) = o1; 
					*(O0 +  4) = o0; 
					*(O1 +  4) = o1; 
					*(O0 +  5) = o0; 
					*(O1 +  5) = o1; 
					*(O0 +  6) = o0; 
					*(O1 +  6) = o1; 
					*(O0 +  7) = o0; 
					*(O1 +  7) = o1; 
					*(O0 +  8) = o0; 
					*(O1 +  8) = o1; 
					*(O0 +  9) = o0; 
					*(O1 +  9) = o1; 
					*(O0 + 10) = o0; 
					*(O1 + 10) = o1; 
					*(O0 + 11) = o0; 
					*(O1 + 11) = o1; 
					*(O0 + 12) = o0; 
					*(O1 + 12) = o1; 
					*(O0 + 13) = o0; 
					*(O1 + 13) = o1; 
					*(O0 + 14) = o0; 
					*(O1 + 14) = o1; 
					*(O0 + 15) = o0; 
					*(O1 + 15) = o1; 
					*(O0 + 16) = o0; 
					*(O1 + 16) = o1; 
					*(O0 + 17) = o0; 
					*(O1 + 17) = o1; 
					*(O0 + 18) = o0; 
					*(O1 + 18) = o1; 
					*(O0 + 19) = o0; 
					*(O1 + 19) = o1; 
					*(O0 + 20) = o0; 
					*(O1 + 20) = o1; 
					*(O0 + 21) = o0; 
					*(O1 + 21) = o1; 
					*(O0 + 22) = o0; 
					*(O1 + 22) = o1; 
					*(O0 + 23) = o0; 
					*(O1 + 23) = o1; 
					*(O0 + 24) = o0; 
					*(O1 + 24) = o1; 
					*(O0 + 25) = o0; 
					*(O1 + 25) = o1; 
					*(O0 + 26) = o0; 
					*(O1 + 26) = o1; 
					*(O0 + 27) = o0; 
					*(O1 + 27) = o1; 
					*(O0 + 28) = o0; 
					*(O1 + 28) = o1; 
					*(O0 + 29) = o0; 
					*(O1 + 29) = o1; 
					*(O0 + 30) = o0; 
					*(O1 + 30) = o1; 
					*(O0 + 31) = o0; 
					*(O1 + 31) = o1; 
					*(O0 + 32) = o0; 
					*(O1 + 32) = o1; 
					*(O0 + 33) = o0; 
					*(O1 + 33) = o1; 
					*(O0 + 34) = o0; 
					*(O1 + 34) = o1; 
					*(O0 + 35) = o0; 
					*(O1 + 35) = o1; 
					*(O0 + 36) = o0; 
					*(O1 + 36) = o1; 
					*(O0 + 37) = o0; 
					*(O1 + 37) = o1; 
					*(O0 + 38) = o0; 
					*(O1 + 38) = o1; 
					*(O0 + 39) = o0; 
					*(O1 + 39) = o1; 
					*(O0 + 40) = o0; 
					*(O1 + 40) = o1; 
					*(O0 + 41) = o0; 
					*(O1 + 41) = o1; 
					*(O0 + 42) = o0; 
					*(O1 + 42) = o1; 
					*(O0 + 43) = o0; 
					*(O1 + 43) = o1; 
					*(O0 + 44) = o0; 
					*(O1 + 44) = o1; 
					*(O0 + 45) = o0; 
					*(O1 + 45) = o1; 
					*(O0 + 46) = o0; 
					*(O1 + 46) = o1; 
					*(O0 + 47) = o0; 
					*(O1 + 47) = o1; 
					*(O0 + 48) = o0; 
					*(O1 + 48) = o1; 
					*(O0 + 49) = o0; 
					*(O1 + 49) = o1; 
					*(O0 + 50) = o0; 
					*(O1 + 50) = o1; 
					*(O0 + 51) = o0; 
					*(O1 + 51) = o1; 
					*(O0 + 52) = o0; 
					*(O1 + 52) = o1; 
					*(O0 + 53) = o0; 
					*(O1 + 53) = o1; 
					*(O0 + 54) = o0; 
					*(O1 + 54) = o1; 
					*(O0 + 55) = o0; 
					*(O1 + 55) = o1; 
					*(O0 + 56) = o0; 
					*(O1 + 56) = o1; 
					*(O0 + 57) = o0; 
					*(O1 + 57) = o1; 
					*(O0 + 58) = o0; 
					*(O1 + 58) = o1; 
					*(O0 + 59) = o0; 
					*(O1 + 59) = o1; 
					*(O0 + 60) = o0; 
					*(O1 + 60) = o1; 
					*(O0 + 61) = o0; 
					*(O1 + 61) = o1; 
					*(O0 + 62) = o0; 
					*(O1 + 62) = o1; 
					*(O0 + 63) = o0; 
					*(O1 + 63) = o1; 
					O0 += 64;
					O1 += 64;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0) = *(I0 +  0); 
					*(O1 +  0) = *(I1 +  0); 
					*(O0 +  1) = *(I0 +  1); 
					*(O1 +  1) = *(I1 +  1); 
					*(O0 +  2) = *(I0 +  2); 
					*(O1 +  2) = *(I1 +  2); 
					*(O0 +  3) = *(I0 +  3); 
					*(O1 +  3) = *(I1 +  3); 
					*(O0 +  4) = *(I0 +  4); 
					*(O1 +  4) = *(I1 +  4); 
					*(O0 +  5) = *(I0 +  5); 
					*(O1 +  5) = *(I1 +  5); 
					*(O0 +  6) = *(I0 +  6); 
					*(O1 +  6) = *(I1 +  6); 
					*(O0 +  7) = *(I0 +  7); 
					*(O1 +  7) = *(I1 +  7); 
					*(O0 +  8) = *(I0 +  8); 
					*(O1 +  8) = *(I1 +  8); 
					*(O0 +  9) = *(I0 +  9); 
					*(O1 +  9) = *(I1 +  9); 
					*(O0 + 10) = *(I0 + 10); 
					*(O1 + 10) = *(I1 + 10); 
					*(O0 + 11) = *(I0 + 11); 
					*(O1 + 11) = *(I1 + 11); 
					*(O0 + 12) = *(I0 + 12); 
					*(O1 + 12) = *(I1 + 12); 
					*(O0 + 13) = *(I0 + 13); 
					*(O1 + 13) = *(I1 + 13); 
					*(O0 + 14) = *(I0 + 14); 
					*(O1 + 14) = *(I1 + 14); 
					*(O0 + 15) = *(I0 + 15); 
					*(O1 + 15) = *(I1 + 15); 
					*(O0 + 16) = *(I0 + 16); 
					*(O1 + 16) = *(I1 + 16); 
					*(O0 + 17) = *(I0 + 17); 
					*(O1 + 17) = *(I1 + 17); 
					*(O0 + 18) = *(I0 + 18); 
					*(O1 + 18) = *(I1 + 18); 
					*(O0 + 19) = *(I0 + 19); 
					*(O1 + 19) = *(I1 + 19); 
					*(O0 + 20) = *(I0 + 20); 
					*(O1 + 20) = *(I1 + 20); 
					*(O0 + 21) = *(I0 + 21); 
					*(O1 + 21) = *(I1 + 21); 
					*(O0 + 22) = *(I0 + 22); 
					*(O1 + 22) = *(I1 + 22); 
					*(O0 + 23) = *(I0 + 23); 
					*(O1 + 23) = *(I1 + 23); 
					*(O0 + 24) = *(I0 + 24); 
					*(O1 + 24) = *(I1 + 24); 
					*(O0 + 25) = *(I0 + 25); 
					*(O1 + 25) = *(I1 + 25); 
					*(O0 + 26) = *(I0 + 26); 
					*(O1 + 26) = *(I1 + 26); 
					*(O0 + 27) = *(I0 + 27); 
					*(O1 + 27) = *(I1 + 27); 
					*(O0 + 28) = *(I0 + 28); 
					*(O1 + 28) = *(I1 + 28); 
					*(O0 + 29) = *(I0 + 29); 
					*(O1 + 29) = *(I1 + 29); 
					*(O0 + 30) = *(I0 + 30); 
					*(O1 + 30) = *(I1 + 30); 
					*(O0 + 31) = *(I0 + 31); 
					*(O1 + 31) = *(I1 + 31); 
					*(O0 + 32) = *(I0 + 32); 
					*(O1 + 32) = *(I1 + 32); 
					*(O0 + 33) = *(I0 + 33); 
					*(O1 + 33) = *(I1 + 33); 
					*(O0 + 34) = *(I0 + 34); 
					*(O1 + 34) = *(I1 + 34); 
					*(O0 + 35) = *(I0 + 35); 
					*(O1 + 35) = *(I1 + 35); 
					*(O0 + 36) = *(I0 + 36); 
					*(O1 + 36) = *(I1 + 36); 
					*(O0 + 37) = *(I0 + 37); 
					*(O1 + 37) = *(I1 + 37); 
					*(O0 + 38) = *(I0 + 38); 
					*(O1 + 38) = *(I1 + 38); 
					*(O0 + 39) = *(I0 + 39); 
					*(O1 + 39) = *(I1 + 39); 
					*(O0 + 40) = *(I0 + 40); 
					*(O1 + 40) = *(I1 + 40); 
					*(O0 + 41) = *(I0 + 41); 
					*(O1 + 41) = *(I1 + 41); 
					*(O0 + 42) = *(I0 + 42); 
					*(O1 + 42) = *(I1 + 42); 
					*(O0 + 43) = *(I0 + 43); 
					*(O1 + 43) = *(I1 + 43); 
					*(O0 + 44) = *(I0 + 44); 
					*(O1 + 44) = *(I1 + 44); 
					*(O0 + 45) = *(I0 + 45); 
					*(O1 + 45) = *(I1 + 45); 
					*(O0 + 46) = *(I0 + 46); 
					*(O1 + 46) = *(I1 + 46); 
					*(O0 + 47) = *(I0 + 47); 
					*(O1 + 47) = *(I1 + 47); 
					*(O0 + 48) = *(I0 + 48); 
					*(O1 + 48) = *(I1 + 48); 
					*(O0 + 49) = *(I0 + 49); 
					*(O1 + 49) = *(I1 + 49); 
					*(O0 + 50) = *(I0 + 50); 
					*(O1 + 50) = *(I1 + 50); 
					*(O0 + 51) = *(I0 + 51); 
					*(O1 + 51) = *(I1 + 51); 
					*(O0 + 52) = *(I0 + 52); 
					*(O1 + 52) = *(I1 + 52); 
					*(O0 + 53) = *(I0 + 53); 
					*(O1 + 53) = *(I1 + 53); 
					*(O0 + 54) = *(I0 + 54); 
					*(O1 + 54) = *(I1 + 54); 
					*(O0 + 55) = *(I0 + 55); 
					*(O1 + 55) = *(I1 + 55); 
					*(O0 + 56) = *(I0 + 56); 
					*(O1 + 56) = *(I1 + 56); 
					*(O0 + 57) = *(I0 + 57); 
					*(O1 + 57) = *(I1 + 57); 
					*(O0 + 58) = *(I0 + 58); 
					*(O1 + 58) = *(I1 + 58); 
					*(O0 + 59) = *(I0 + 59); 
					*(O1 + 59) = *(I1 + 59); 
					*(O0 + 60) = *(I0 + 60); 
					*(O1 + 60) = *(I1 + 60); 
					*(O0 + 61) = *(I0 + 61); 
					*(O1 + 61) = *(I1 + 61); 
					*(O0 + 62) = *(I0 + 62); 
					*(O1 + 62) = *(I1 + 62); 
					*(O0 + 63) = *(I0 + 63); 
					*(O1 + 63) = *(I1 + 63); 
					I0 += 64;
					O0 += 64;
					I1 += 64;
					O1 += 64;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0) = * I0; I0 += Is;
					*(O1 +  0) = * I1; I1 += Is;
					*(O0 +  1) = * I0; I0 += Is;
					*(O1 +  1) = * I1; I1 += Is;
					*(O0 +  2) = * I0; I0 += Is;
					*(O1 +  2) = * I1; I1 += Is;
					*(O0 +  3) = * I0; I0 += Is;
					*(O1 +  3) = * I1; I1 += Is;
					*(O0 +  4) = * I0; I0 += Is;
					*(O1 +  4) = * I1; I1 += Is;
					*(O0 +  5) = * I0; I0 += Is;
					*(O1 +  5) = * I1; I1 += Is;
					*(O0 +  6) = * I0; I0 += Is;
					*(O1 +  6) = * I1; I1 += Is;
					*(O0 +  7) = * I0; I0 += Is;
					*(O1 +  7) = * I1; I1 += Is;
					*(O0 +  8) = * I0; I0 += Is;
					*(O1 +  8) = * I1; I1 += Is;
					*(O0 +  9) = * I0; I0 += Is;
					*(O1 +  9) = * I1; I1 += Is;
					*(O0 + 10) = * I0; I0 += Is;
					*(O1 + 10) = * I1; I1 += Is;
					*(O0 + 11) = * I0; I0 += Is;
					*(O1 + 11) = * I1; I1 += Is;
					*(O0 + 12) = * I0; I0 += Is;
					*(O1 + 12) = * I1; I1 += Is;
					*(O0 + 13) = * I0; I0 += Is;
					*(O1 + 13) = * I1; I1 += Is;
					*(O0 + 14) = * I0; I0 += Is;
					*(O1 + 14) = * I1; I1 += Is;
					*(O0 + 15) = * I0; I0 += Is;
					*(O1 + 15) = * I1; I1 += Is;
					*(O0 + 16) = * I0; I0 += Is;
					*(O1 + 16) = * I1; I1 += Is;
					*(O0 + 17) = * I0; I0 += Is;
					*(O1 + 17) = * I1; I1 += Is;
					*(O0 + 18) = * I0; I0 += Is;
					*(O1 + 18) = * I1; I1 += Is;
					*(O0 + 19) = * I0; I0 += Is;
					*(O1 + 19) = * I1; I1 += Is;
					*(O0 + 20) = * I0; I0 += Is;
					*(O1 + 20) = * I1; I1 += Is;
					*(O0 + 21) = * I0; I0 += Is;
					*(O1 + 21) = * I1; I1 += Is;
					*(O0 + 22) = * I0; I0 += Is;
					*(O1 + 22) = * I1; I1 += Is;
					*(O0 + 23) = * I0; I0 += Is;
					*(O1 + 23) = * I1; I1 += Is;
					*(O0 + 24) = * I0; I0 += Is;
					*(O1 + 24) = * I1; I1 += Is;
					*(O0 + 25) = * I0; I0 += Is;
					*(O1 + 25) = * I1; I1 += Is;
					*(O0 + 26) = * I0; I0 += Is;
					*(O1 + 26) = * I1; I1 += Is;
					*(O0 + 27) = * I0; I0 += Is;
					*(O1 + 27) = * I1; I1 += Is;
					*(O0 + 28) = * I0; I0 += Is;
					*(O1 + 28) = * I1; I1 += Is;
					*(O0 + 29) = * I0; I0 += Is;
					*(O1 + 29) = * I1; I1 += Is;
					*(O0 + 30) = * I0; I0 += Is;
					*(O1 + 30) = * I1; I1 += Is;
					*(O0 + 31) = * I0; I0 += Is;
					*(O1 + 31) = * I1; I1 += Is;
					*(O0 + 32) = * I0; I0 += Is;
					*(O1 + 32) = * I1; I1 += Is;
					*(O0 + 33) = * I0; I0 += Is;
					*(O1 + 33) = * I1; I1 += Is;
					*(O0 + 34) = * I0; I0 += Is;
					*(O1 + 34) = * I1; I1 += Is;
					*(O0 + 35) = * I0; I0 += Is;
					*(O1 + 35) = * I1; I1 += Is;
					*(O0 + 36) = * I0; I0 += Is;
					*(O1 + 36) = * I1; I1 += Is;
					*(O0 + 37) = * I0; I0 += Is;
					*(O1 + 37) = * I1; I1 += Is;
					*(O0 + 38) = * I0; I0 += Is;
					*(O1 + 38) = * I1; I1 += Is;
					*(O0 + 39) = * I0; I0 += Is;
					*(O1 + 39) = * I1; I1 += Is;
					*(O0 + 40) = * I0; I0 += Is;
					*(O1 + 40) = * I1; I1 += Is;
					*(O0 + 41) = * I0; I0 += Is;
					*(O1 + 41) = * I1; I1 += Is;
					*(O0 + 42) = * I0; I0 += Is;
					*(O1 + 42) = * I1; I1 += Is;
					*(O0 + 43) = * I0; I0 += Is;
					*(O1 + 43) = * I1; I1 += Is;
					*(O0 + 44) = * I0; I0 += Is;
					*(O1 + 44) = * I1; I1 += Is;
					*(O0 + 45) = * I0; I0 += Is;
					*(O1 + 45) = * I1; I1 += Is;
					*(O0 + 46) = * I0; I0 += Is;
					*(O1 + 46) = * I1; I1 += Is;
					*(O0 + 47) = * I0; I0 += Is;
					*(O1 + 47) = * I1; I1 += Is;
					*(O0 + 48) = * I0; I0 += Is;
					*(O1 + 48) = * I1; I1 += Is;
					*(O0 + 49) = * I0; I0 += Is;
					*(O1 + 49) = * I1; I1 += Is;
					*(O0 + 50) = * I0; I0 += Is;
					*(O1 + 50) = * I1; I1 += Is;
					*(O0 + 51) = * I0; I0 += Is;
					*(O1 + 51) = * I1; I1 += Is;
					*(O0 + 52) = * I0; I0 += Is;
					*(O1 + 52) = * I1; I1 += Is;
					*(O0 + 53) = * I0; I0 += Is;
					*(O1 + 53) = * I1; I1 += Is;
					*(O0 + 54) = * I0; I0 += Is;
					*(O1 + 54) = * I1; I1 += Is;
					*(O0 + 55) = * I0; I0 += Is;
					*(O1 + 55) = * I1; I1 += Is;
					*(O0 + 56) = * I0; I0 += Is;
					*(O1 + 56) = * I1; I1 += Is;
					*(O0 + 57) = * I0; I0 += Is;
					*(O1 + 57) = * I1; I1 += Is;
					*(O0 + 58) = * I0; I0 += Is;
					*(O1 + 58) = * I1; I1 += Is;
					*(O0 + 59) = * I0; I0 += Is;
					*(O1 + 59) = * I1; I1 += Is;
					*(O0 + 60) = * I0; I0 += Is;
					*(O1 + 60) = * I1; I1 += Is;
					*(O0 + 61) = * I0; I0 += Is;
					*(O1 + 61) = * I1; I1 += Is;
					*(O0 + 62) = * I0; I0 += Is;
					*(O1 + 62) = * I1; I1 += Is;
					*(O0 + 63) = * I0; I0 += Is;
					*(O1 + 63) = * I1; I1 += Is;
					O0 += 64;
					O1 += 64;
				}
				break;
			}
		}
	}
	else {
		switch (Is) {
			case 0: {
				o0 = *I0;
				o1 = *I1;
				for (; i; i--) {
					*(O0 +  0 * Os) = o0; 
					*(O1 +  0 * Os) = o1; 
					*(O0 +  1 * Os) = o0; 
					*(O1 +  1 * Os) = o1; 
					*(O0 +  2 * Os) = o0; 
					*(O1 +  2 * Os) = o1; 
					*(O0 +  3 * Os) = o0; 
					*(O1 +  3 * Os) = o1; 
					*(O0 +  4 * Os) = o0; 
					*(O1 +  4 * Os) = o1; 
					*(O0 +  5 * Os) = o0; 
					*(O1 +  5 * Os) = o1; 
					*(O0 +  6 * Os) = o0; 
					*(O1 +  6 * Os) = o1; 
					*(O0 +  7 * Os) = o0; 
					*(O1 +  7 * Os) = o1; 
					*(O0 +  8 * Os) = o0; 
					*(O1 +  8 * Os) = o1; 
					*(O0 +  9 * Os) = o0; 
					*(O1 +  9 * Os) = o1; 
					*(O0 + 10 * Os) = o0; 
					*(O1 + 10 * Os) = o1; 
					*(O0 + 11 * Os) = o0; 
					*(O1 + 11 * Os) = o1; 
					*(O0 + 12 * Os) = o0; 
					*(O1 + 12 * Os) = o1; 
					*(O0 + 13 * Os) = o0; 
					*(O1 + 13 * Os) = o1; 
					*(O0 + 14 * Os) = o0; 
					*(O1 + 14 * Os) = o1; 
					*(O0 + 15 * Os) = o0; 
					*(O1 + 15 * Os) = o1; 
					*(O0 + 16 * Os) = o0; 
					*(O1 + 16 * Os) = o1; 
					*(O0 + 17 * Os) = o0; 
					*(O1 + 17 * Os) = o1; 
					*(O0 + 18 * Os) = o0; 
					*(O1 + 18 * Os) = o1; 
					*(O0 + 19 * Os) = o0; 
					*(O1 + 19 * Os) = o1; 
					*(O0 + 20 * Os) = o0; 
					*(O1 + 20 * Os) = o1; 
					*(O0 + 21 * Os) = o0; 
					*(O1 + 21 * Os) = o1; 
					*(O0 + 22 * Os) = o0; 
					*(O1 + 22 * Os) = o1; 
					*(O0 + 23 * Os) = o0; 
					*(O1 + 23 * Os) = o1; 
					*(O0 + 24 * Os) = o0; 
					*(O1 + 24 * Os) = o1; 
					*(O0 + 25 * Os) = o0; 
					*(O1 + 25 * Os) = o1; 
					*(O0 + 26 * Os) = o0; 
					*(O1 + 26 * Os) = o1; 
					*(O0 + 27 * Os) = o0; 
					*(O1 + 27 * Os) = o1; 
					*(O0 + 28 * Os) = o0; 
					*(O1 + 28 * Os) = o1; 
					*(O0 + 29 * Os) = o0; 
					*(O1 + 29 * Os) = o1; 
					*(O0 + 30 * Os) = o0; 
					*(O1 + 30 * Os) = o1; 
					*(O0 + 31 * Os) = o0; 
					*(O1 + 31 * Os) = o1; 
					*(O0 + 32 * Os) = o0; 
					*(O1 + 32 * Os) = o1; 
					*(O0 + 33 * Os) = o0; 
					*(O1 + 33 * Os) = o1; 
					*(O0 + 34 * Os) = o0; 
					*(O1 + 34 * Os) = o1; 
					*(O0 + 35 * Os) = o0; 
					*(O1 + 35 * Os) = o1; 
					*(O0 + 36 * Os) = o0; 
					*(O1 + 36 * Os) = o1; 
					*(O0 + 37 * Os) = o0; 
					*(O1 + 37 * Os) = o1; 
					*(O0 + 38 * Os) = o0; 
					*(O1 + 38 * Os) = o1; 
					*(O0 + 39 * Os) = o0; 
					*(O1 + 39 * Os) = o1; 
					*(O0 + 40 * Os) = o0; 
					*(O1 + 40 * Os) = o1; 
					*(O0 + 41 * Os) = o0; 
					*(O1 + 41 * Os) = o1; 
					*(O0 + 42 * Os) = o0; 
					*(O1 + 42 * Os) = o1; 
					*(O0 + 43 * Os) = o0; 
					*(O1 + 43 * Os) = o1; 
					*(O0 + 44 * Os) = o0; 
					*(O1 + 44 * Os) = o1; 
					*(O0 + 45 * Os) = o0; 
					*(O1 + 45 * Os) = o1; 
					*(O0 + 46 * Os) = o0; 
					*(O1 + 46 * Os) = o1; 
					*(O0 + 47 * Os) = o0; 
					*(O1 + 47 * Os) = o1; 
					*(O0 + 48 * Os) = o0; 
					*(O1 + 48 * Os) = o1; 
					*(O0 + 49 * Os) = o0; 
					*(O1 + 49 * Os) = o1; 
					*(O0 + 50 * Os) = o0; 
					*(O1 + 50 * Os) = o1; 
					*(O0 + 51 * Os) = o0; 
					*(O1 + 51 * Os) = o1; 
					*(O0 + 52 * Os) = o0; 
					*(O1 + 52 * Os) = o1; 
					*(O0 + 53 * Os) = o0; 
					*(O1 + 53 * Os) = o1; 
					*(O0 + 54 * Os) = o0; 
					*(O1 + 54 * Os) = o1; 
					*(O0 + 55 * Os) = o0; 
					*(O1 + 55 * Os) = o1; 
					*(O0 + 56 * Os) = o0; 
					*(O1 + 56 * Os) = o1; 
					*(O0 + 57 * Os) = o0; 
					*(O1 + 57 * Os) = o1; 
					*(O0 + 58 * Os) = o0; 
					*(O1 + 58 * Os) = o1; 
					*(O0 + 59 * Os) = o0; 
					*(O1 + 59 * Os) = o1; 
					*(O0 + 60 * Os) = o0; 
					*(O1 + 60 * Os) = o1; 
					*(O0 + 61 * Os) = o0; 
					*(O1 + 61 * Os) = o1; 
					*(O0 + 62 * Os) = o0; 
					*(O1 + 62 * Os) = o1; 
					*(O0 + 63 * Os) = o0; 
					*(O1 + 63 * Os) = o1; 
					O0 += 64 * Os;
					O1 += 64 * Os;
				}
				break;
			}
			case 1: {
				for (; i; i--) {
					*(O0 +  0 * Os) = *(I0 +  0);
					*(O1 +  0 * Os) = *(I1 +  0);
					*(O0 +  1 * Os) = *(I0 +  1);
					*(O1 +  1 * Os) = *(I1 +  1);
					*(O0 +  2 * Os) = *(I0 +  2);
					*(O1 +  2 * Os) = *(I1 +  2);
					*(O0 +  3 * Os) = *(I0 +  3);
					*(O1 +  3 * Os) = *(I1 +  3);
					*(O0 +  4 * Os) = *(I0 +  4);
					*(O1 +  4 * Os) = *(I1 +  4);
					*(O0 +  5 * Os) = *(I0 +  5);
					*(O1 +  5 * Os) = *(I1 +  5);
					*(O0 +  6 * Os) = *(I0 +  6);
					*(O1 +  6 * Os) = *(I1 +  6);
					*(O0 +  7 * Os) = *(I0 +  7);
					*(O1 +  7 * Os) = *(I1 +  7);
					*(O0 +  8 * Os) = *(I0 +  8);
					*(O1 +  8 * Os) = *(I1 +  8);
					*(O0 +  9 * Os) = *(I0 +  9);
					*(O1 +  9 * Os) = *(I1 +  9);
					*(O0 + 10 * Os) = *(I0 + 10);
					*(O1 + 10 * Os) = *(I1 + 10);
					*(O0 + 11 * Os) = *(I0 + 11);
					*(O1 + 11 * Os) = *(I1 + 11);
					*(O0 + 12 * Os) = *(I0 + 12);
					*(O1 + 12 * Os) = *(I1 + 12);
					*(O0 + 13 * Os) = *(I0 + 13);
					*(O1 + 13 * Os) = *(I1 + 13);
					*(O0 + 14 * Os) = *(I0 + 14);
					*(O1 + 14 * Os) = *(I1 + 14);
					*(O0 + 15 * Os) = *(I0 + 15);
					*(O1 + 15 * Os) = *(I1 + 15);
					*(O0 + 16 * Os) = *(I0 + 16);
					*(O1 + 16 * Os) = *(I1 + 16);
					*(O0 + 17 * Os) = *(I0 + 17);
					*(O1 + 17 * Os) = *(I1 + 17);
					*(O0 + 18 * Os) = *(I0 + 18);
					*(O1 + 18 * Os) = *(I1 + 18);
					*(O0 + 19 * Os) = *(I0 + 19);
					*(O1 + 19 * Os) = *(I1 + 19);
					*(O0 + 20 * Os) = *(I0 + 20);
					*(O1 + 20 * Os) = *(I1 + 20);
					*(O0 + 21 * Os) = *(I0 + 21);
					*(O1 + 21 * Os) = *(I1 + 21);
					*(O0 + 22 * Os) = *(I0 + 22);
					*(O1 + 22 * Os) = *(I1 + 22);
					*(O0 + 23 * Os) = *(I0 + 23);
					*(O1 + 23 * Os) = *(I1 + 23);
					*(O0 + 24 * Os) = *(I0 + 24);
					*(O1 + 24 * Os) = *(I1 + 24);
					*(O0 + 25 * Os) = *(I0 + 25);
					*(O1 + 25 * Os) = *(I1 + 25);
					*(O0 + 26 * Os) = *(I0 + 26);
					*(O1 + 26 * Os) = *(I1 + 26);
					*(O0 + 27 * Os) = *(I0 + 27);
					*(O1 + 27 * Os) = *(I1 + 27);
					*(O0 + 28 * Os) = *(I0 + 28);
					*(O1 + 28 * Os) = *(I1 + 28);
					*(O0 + 29 * Os) = *(I0 + 29);
					*(O1 + 29 * Os) = *(I1 + 29);
					*(O0 + 30 * Os) = *(I0 + 30);
					*(O1 + 30 * Os) = *(I1 + 30);
					*(O0 + 31 * Os) = *(I0 + 31);
					*(O1 + 31 * Os) = *(I1 + 31);
					*(O0 + 32 * Os) = *(I0 + 32);
					*(O1 + 32 * Os) = *(I1 + 32);
					*(O0 + 33 * Os) = *(I0 + 33);
					*(O1 + 33 * Os) = *(I1 + 33);
					*(O0 + 34 * Os) = *(I0 + 34);
					*(O1 + 34 * Os) = *(I1 + 34);
					*(O0 + 35 * Os) = *(I0 + 35);
					*(O1 + 35 * Os) = *(I1 + 35);
					*(O0 + 36 * Os) = *(I0 + 36);
					*(O1 + 36 * Os) = *(I1 + 36);
					*(O0 + 37 * Os) = *(I0 + 37);
					*(O1 + 37 * Os) = *(I1 + 37);
					*(O0 + 38 * Os) = *(I0 + 38);
					*(O1 + 38 * Os) = *(I1 + 38);
					*(O0 + 39 * Os) = *(I0 + 39);
					*(O1 + 39 * Os) = *(I1 + 39);
					*(O0 + 40 * Os) = *(I0 + 40);
					*(O1 + 40 * Os) = *(I1 + 40);
					*(O0 + 41 * Os) = *(I0 + 41);
					*(O1 + 41 * Os) = *(I1 + 41);
					*(O0 + 42 * Os) = *(I0 + 42);
					*(O1 + 42 * Os) = *(I1 + 42);
					*(O0 + 43 * Os) = *(I0 + 43);
					*(O1 + 43 * Os) = *(I1 + 43);
					*(O0 + 44 * Os) = *(I0 + 44);
					*(O1 + 44 * Os) = *(I1 + 44);
					*(O0 + 45 * Os) = *(I0 + 45);
					*(O1 + 45 * Os) = *(I1 + 45);
					*(O0 + 46 * Os) = *(I0 + 46);
					*(O1 + 46 * Os) = *(I1 + 46);
					*(O0 + 47 * Os) = *(I0 + 47);
					*(O1 + 47 * Os) = *(I1 + 47);
					*(O0 + 48 * Os) = *(I0 + 48);
					*(O1 + 48 * Os) = *(I1 + 48);
					*(O0 + 49 * Os) = *(I0 + 49);
					*(O1 + 49 * Os) = *(I1 + 49);
					*(O0 + 50 * Os) = *(I0 + 50);
					*(O1 + 50 * Os) = *(I1 + 50);
					*(O0 + 51 * Os) = *(I0 + 51);
					*(O1 + 51 * Os) = *(I1 + 51);
					*(O0 + 52 * Os) = *(I0 + 52);
					*(O1 + 52 * Os) = *(I1 + 52);
					*(O0 + 53 * Os) = *(I0 + 53);
					*(O1 + 53 * Os) = *(I1 + 53);
					*(O0 + 54 * Os) = *(I0 + 54);
					*(O1 + 54 * Os) = *(I1 + 54);
					*(O0 + 55 * Os) = *(I0 + 55);
					*(O1 + 55 * Os) = *(I1 + 55);
					*(O0 + 56 * Os) = *(I0 + 56);
					*(O1 + 56 * Os) = *(I1 + 56);
					*(O0 + 57 * Os) = *(I0 + 57);
					*(O1 + 57 * Os) = *(I1 + 57);
					*(O0 + 58 * Os) = *(I0 + 58);
					*(O1 + 58 * Os) = *(I1 + 58);
					*(O0 + 59 * Os) = *(I0 + 59);
					*(O1 + 59 * Os) = *(I1 + 59);
					*(O0 + 60 * Os) = *(I0 + 60);
					*(O1 + 60 * Os) = *(I1 + 60);
					*(O0 + 61 * Os) = *(I0 + 61);
					*(O1 + 61 * Os) = *(I1 + 61);
					*(O0 + 62 * Os) = *(I0 + 62);
					*(O1 + 62 * Os) = *(I1 + 62);
					*(O0 + 63 * Os) = *(I0 + 63);
					*(O1 + 63 * Os) = *(I1 + 63);
					I0 += 64;
					O0 += 64 * Os;
					I1 += 64;
					O1 += 64 * Os;
				}
				break;
			}
			default: {
				for (; i; i--) {
					*(O0 +  0 * Os) = * I0; I0 += Is;
					*(O1 +  0 * Os) = * I1; I1 += Is;
					*(O0 +  1 * Os) = * I0; I0 += Is;
					*(O1 +  1 * Os) = * I1; I1 += Is;
					*(O0 +  2 * Os) = * I0; I0 += Is;
					*(O1 +  2 * Os) = * I1; I1 += Is;
					*(O0 +  3 * Os) = * I0; I0 += Is;
					*(O1 +  3 * Os) = * I1; I1 += Is;
					*(O0 +  4 * Os) = * I0; I0 += Is;
					*(O1 +  4 * Os) = * I1; I1 += Is;
					*(O0 +  5 * Os) = * I0; I0 += Is;
					*(O1 +  5 * Os) = * I1; I1 += Is;
					*(O0 +  6 * Os) = * I0; I0 += Is;
					*(O1 +  6 * Os) = * I1; I1 += Is;
					*(O0 +  7 * Os) = * I0; I0 += Is;
					*(O1 +  7 * Os) = * I1; I1 += Is;
					*(O0 +  8 * Os) = * I0; I0 += Is;
					*(O1 +  8 * Os) = * I1; I1 += Is;
					*(O0 +  9 * Os) = * I0; I0 += Is;
					*(O1 +  9 * Os) = * I1; I1 += Is;
					*(O0 + 10 * Os) = * I0; I0 += Is;
					*(O1 + 10 * Os) = * I1; I1 += Is;
					*(O0 + 11 * Os) = * I0; I0 += Is;
					*(O1 + 11 * Os) = * I1; I1 += Is;
					*(O0 + 12 * Os) = * I0; I0 += Is;
					*(O1 + 12 * Os) = * I1; I1 += Is;
					*(O0 + 13 * Os) = * I0; I0 += Is;
					*(O1 + 13 * Os) = * I1; I1 += Is;
					*(O0 + 14 * Os) = * I0; I0 += Is;
					*(O1 + 14 * Os) = * I1; I1 += Is;
					*(O0 + 15 * Os) = * I0; I0 += Is;
					*(O1 + 15 * Os) = * I1; I1 += Is;
					*(O0 + 16 * Os) = * I0; I0 += Is;
					*(O1 + 16 * Os) = * I1; I1 += Is;
					*(O0 + 17 * Os) = * I0; I0 += Is;
					*(O1 + 17 * Os) = * I1; I1 += Is;
					*(O0 + 18 * Os) = * I0; I0 += Is;
					*(O1 + 18 * Os) = * I1; I1 += Is;
					*(O0 + 19 * Os) = * I0; I0 += Is;
					*(O1 + 19 * Os) = * I1; I1 += Is;
					*(O0 + 20 * Os) = * I0; I0 += Is;
					*(O1 + 20 * Os) = * I1; I1 += Is;
					*(O0 + 21 * Os) = * I0; I0 += Is;
					*(O1 + 21 * Os) = * I1; I1 += Is;
					*(O0 + 22 * Os) = * I0; I0 += Is;
					*(O1 + 22 * Os) = * I1; I1 += Is;
					*(O0 + 23 * Os) = * I0; I0 += Is;
					*(O1 + 23 * Os) = * I1; I1 += Is;
					*(O0 + 24 * Os) = * I0; I0 += Is;
					*(O1 + 24 * Os) = * I1; I1 += Is;
					*(O0 + 25 * Os) = * I0; I0 += Is;
					*(O1 + 25 * Os) = * I1; I1 += Is;
					*(O0 + 26 * Os) = * I0; I0 += Is;
					*(O1 + 26 * Os) = * I1; I1 += Is;
					*(O0 + 27 * Os) = * I0; I0 += Is;
					*(O1 + 27 * Os) = * I1; I1 += Is;
					*(O0 + 28 * Os) = * I0; I0 += Is;
					*(O1 + 28 * Os) = * I1; I1 += Is;
					*(O0 + 29 * Os) = * I0; I0 += Is;
					*(O1 + 29 * Os) = * I1; I1 += Is;
					*(O0 + 30 * Os) = * I0; I0 += Is;
					*(O1 + 30 * Os) = * I1; I1 += Is;
					*(O0 + 31 * Os) = * I0; I0 += Is;
					*(O1 + 31 * Os) = * I1; I1 += Is;
					*(O0 + 32 * Os) = * I0; I0 += Is;
					*(O1 + 32 * Os) = * I1; I1 += Is;
					*(O0 + 33 * Os) = * I0; I0 += Is;
					*(O1 + 33 * Os) = * I1; I1 += Is;
					*(O0 + 34 * Os) = * I0; I0 += Is;
					*(O1 + 34 * Os) = * I1; I1 += Is;
					*(O0 + 35 * Os) = * I0; I0 += Is;
					*(O1 + 35 * Os) = * I1; I1 += Is;
					*(O0 + 36 * Os) = * I0; I0 += Is;
					*(O1 + 36 * Os) = * I1; I1 += Is;
					*(O0 + 37 * Os) = * I0; I0 += Is;
					*(O1 + 37 * Os) = * I1; I1 += Is;
					*(O0 + 38 * Os) = * I0; I0 += Is;
					*(O1 + 38 * Os) = * I1; I1 += Is;
					*(O0 + 39 * Os) = * I0; I0 += Is;
					*(O1 + 39 * Os) = * I1; I1 += Is;
					*(O0 + 40 * Os) = * I0; I0 += Is;
					*(O1 + 40 * Os) = * I1; I1 += Is;
					*(O0 + 41 * Os) = * I0; I0 += Is;
					*(O1 + 41 * Os) = * I1; I1 += Is;
					*(O0 + 42 * Os) = * I0; I0 += Is;
					*(O1 + 42 * Os) = * I1; I1 += Is;
					*(O0 + 43 * Os) = * I0; I0 += Is;
					*(O1 + 43 * Os) = * I1; I1 += Is;
					*(O0 + 44 * Os) = * I0; I0 += Is;
					*(O1 + 44 * Os) = * I1; I1 += Is;
					*(O0 + 45 * Os) = * I0; I0 += Is;
					*(O1 + 45 * Os) = * I1; I1 += Is;
					*(O0 + 46 * Os) = * I0; I0 += Is;
					*(O1 + 46 * Os) = * I1; I1 += Is;
					*(O0 + 47 * Os) = * I0; I0 += Is;
					*(O1 + 47 * Os) = * I1; I1 += Is;
					*(O0 + 48 * Os) = * I0; I0 += Is;
					*(O1 + 48 * Os) = * I1; I1 += Is;
					*(O0 + 49 * Os) = * I0; I0 += Is;
					*(O1 + 49 * Os) = * I1; I1 += Is;
					*(O0 + 50 * Os) = * I0; I0 += Is;
					*(O1 + 50 * Os) = * I1; I1 += Is;
					*(O0 + 51 * Os) = * I0; I0 += Is;
					*(O1 + 51 * Os) = * I1; I1 += Is;
					*(O0 + 52 * Os) = * I0; I0 += Is;
					*(O1 + 52 * Os) = * I1; I1 += Is;
					*(O0 + 53 * Os) = * I0; I0 += Is;
					*(O1 + 53 * Os) = * I1; I1 += Is;
					*(O0 + 54 * Os) = * I0; I0 += Is;
					*(O1 + 54 * Os) = * I1; I1 += Is;
					*(O0 + 55 * Os) = * I0; I0 += Is;
					*(O1 + 55 * Os) = * I1; I1 += Is;
					*(O0 + 56 * Os) = * I0; I0 += Is;
					*(O1 + 56 * Os) = * I1; I1 += Is;
					*(O0 + 57 * Os) = * I0; I0 += Is;
					*(O1 + 57 * Os) = * I1; I1 += Is;
					*(O0 + 58 * Os) = * I0; I0 += Is;
					*(O1 + 58 * Os) = * I1; I1 += Is;
					*(O0 + 59 * Os) = * I0; I0 += Is;
					*(O1 + 59 * Os) = * I1; I1 += Is;
					*(O0 + 60 * Os) = * I0; I0 += Is;
					*(O1 + 60 * Os) = * I1; I1 += Is;
					*(O0 + 61 * Os) = * I0; I0 += Is;
					*(O1 + 61 * Os) = * I1; I1 += Is;
					*(O0 + 62 * Os) = * I0; I0 += Is;
					*(O1 + 62 * Os) = * I1; I1 += Is;
					*(O0 + 63 * Os) = * I0; I0 += Is;
					*(O1 + 63 * Os) = * I1; I1 += Is;
					O0 += 64 * Os;
					O1 += 64 * Os;
				}
				break;
			}
		}
	}
	i = n & 63;
	if (i) {
		replicate_2x32(O0, i, I0, oS, iS, Os, Is); 
	}
}

//------------------------------------------------------------------------------
# endif
